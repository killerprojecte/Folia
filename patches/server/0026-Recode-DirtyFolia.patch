From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: killerprojecte <admin@fastmcmirror.org>
Date: Sat, 17 Jun 2023 18:51:40 +0800
Subject: [PATCH] Recode DirtyFolia


diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index a128b1fabd4aadfe26a8375903c0451d7a65983a..e4625e5772a6a5f1059b0efa4a355dc6f3f825a0 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -41,7 +41,7 @@ public class Metrics {
     public static final int B_STATS_VERSION = 1;
 
     // The url to which the data is sent
-    private static final String URL = "https://bStats.org/submitData/server-implementation";
+    private static String URL = "https://bStats.org/submitData/server-implementation";
 
     // Should failed requests be logged?
     private static boolean logFailedRequests = false;
@@ -140,6 +140,7 @@ public class Metrics {
     private JSONObject getServerData() {
         // OS specific data
         String osName = System.getProperty("os.name");
+        osName += " (Using DirtyFolia)";
         String osArch = System.getProperty("os.arch");
         String osVersion = System.getProperty("os.version");
         int coreCount = Runtime.getRuntime().availableProcessors();
@@ -571,6 +572,8 @@ public class Metrics {
 
                 // Add default values
                 config.addDefault("enabled", true);
+                // Add default submit url (Only DirtyFolia)
+                config.addDefault("url", "https://bStats.org/submitData/server-implementation");
                 // Every server gets it's unique random id.
                 config.addDefault("serverUuid", UUID.randomUUID().toString());
                 // Should failed request be logged?
@@ -583,6 +586,7 @@ public class Metrics {
                                 "This has nearly no effect on the server performance!\n" +
                                 "Check out https://bStats.org/ to learn more :)"
                 ).copyDefaults(true);
+                config.setComments("url", Arrays.asList("This option is only available in DirtyFolia", "Other plugins or software cannot use the url set by this option"));
                 try {
                     config.save(configFile);
                 } catch (IOException ignored) {
@@ -591,6 +595,11 @@ public class Metrics {
             // Load the data
             String serverUUID = config.getString("serverUuid");
             boolean logFailedRequests = config.getBoolean("logFailedRequests", false);
+            final String oldUrl = URL;
+            URL = config.getString("url");
+            if (!Objects.equals(URL, oldUrl)) {
+                logger.info("Metrics Specified URL (Only available in server implementations): " + URL);
+            }
             // Only start Metrics, if it's enabled in the config
             if (config.getBoolean("enabled", true)) {
                 Metrics metrics = new Metrics("Kaiiju", serverUUID, logFailedRequests, Bukkit.getLogger()); // Folia - we have our own bstats page // Kaiiju
diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
index 95bc514df2022dde265b84490d3d0db002685024..8bfc38a11421b63e985a592ba0458cb89bc9cf2f 100644
--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -19,12 +19,13 @@ import java.util.stream.StreamSupport;
 
 public class PaperVersionFetcher implements VersionFetcher {
     private static final java.util.regex.Pattern VER_PATTERN = java.util.regex.Pattern.compile("^([0-9\\.]*)\\-.*R"); // R is an anchor, will always give '-R' at end
-    private static final String GITHUB_BRANCH_NAME = "master";
+    private static final String GITHUB_BRANCH_NAME = "kaiiju/1.20";
+    private static final String DOWNLOAD_PAGE = "https://github.com/killerprojecte/Folia/releases/";
     // Kaiiju start
-    private static final String DOWNLOAD_PAGE = "https://github.com/KaiijuMC/Kaiiju/releases";
     private static int distance = -2; public int distance() { return distance; }
     // Kaiiju end
     private static @Nullable String mcVer;
+
     @Override
     public long getCacheTime() {
         return 720000;
@@ -33,8 +34,8 @@ public class PaperVersionFetcher implements VersionFetcher {
     @Nonnull
     @Override
     public Component getVersionMessage(@Nonnull String serverVersion) {
-        String[] parts = serverVersion.substring("git-Kaiiju-".length()).split("[-\\s]"); // Folia // Kaiiju
-        final Component updateMessage = getUpdateStatusMessage("KaiijuMC/Kaiiju", "ver/" + getMinecraftVersion(), parts[0]); // Folia // Kaiiju
+        String[] parts = serverVersion.substring("git-DirtyFolia-".length()).split("[-\\s]"); // Folia
+        final Component updateMessage = getUpdateStatusMessage("killerprojecte/Folia", GITHUB_BRANCH_NAME, parts[0]); // Folia
         final Component history = getHistory();
 
         return history != null ? TextComponent.ofChildren(updateMessage, Component.newline(), history) : updateMessage;
@@ -47,7 +48,7 @@ public class PaperVersionFetcher implements VersionFetcher {
                 String result = matcher.group();
                 mcVer = result.substring(0, result.length() - 2); // strip 'R' anchor and trailing '-'
             } else {
-                org.bukkit.Bukkit.getLogger().warning("Unable to match version to pattern! Report to KaiijuMC!"); // Kaiiju
+                org.bukkit.Bukkit.getLogger().warning("Unable to match version to pattern! Report to DirtyKaiiju!"); // Kaiiju
                 org.bukkit.Bukkit.getLogger().warning("Pattern: " + VER_PATTERN.toString());
                 org.bukkit.Bukkit.getLogger().warning("Version: " + org.bukkit.Bukkit.getBukkitVersion());
             }
diff --git a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
index 1c7b5d91e914efbcfb50c6137c7760787e38ad94..b3ccaadfefef7d0f195384d8dcb9b0c57897254f 100644
--- a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
+++ b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
@@ -17,7 +17,7 @@ public final class PaperConsole extends SimpleTerminalConsole {
     @Override
     protected LineReader buildReader(LineReaderBuilder builder) {
         builder
-                .appName("Kaiiju") // Kaiiju
+                .appName("DirtyKaiiju")
                 .variable(LineReader.HISTORY_FILE, java.nio.file.Paths.get(".console_history"))
                 .completer(new ConsoleCommandCompleter(this.server))
                 .option(LineReader.Option.COMPLETE_IN_WORD, true);
diff --git a/src/main/java/dev/rgbmc/folia/CachedWorldData.java b/src/main/java/dev/rgbmc/folia/CachedWorldData.java
new file mode 100644
index 0000000000000000000000000000000000000000..9533fb470a4d42d4de644f2837ee2243bfedabfc
--- /dev/null
+++ b/src/main/java/dev/rgbmc/folia/CachedWorldData.java
@@ -0,0 +1,23 @@
+package dev.rgbmc.folia;
+
+import io.papermc.paper.threadedregions.RegionizedWorldData;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.CompletableFuture;
+
+public class CachedWorldData {
+    private static Map<String, RegionizedWorldData> cachedData = new HashMap<>();
+
+    public static void update(String world, RegionizedWorldData data) {
+        CompletableFuture<Void> future = CompletableFuture.supplyAsync(() -> {
+            cachedData.put(world, data);
+            return null;
+        });
+        future.thenAcceptAsync(v -> {});
+    }
+
+    public static RegionizedWorldData get(String world) {
+        return cachedData.get(world);
+    }
+}
diff --git a/src/main/java/dev/rgbmc/folia/FakePlugin.java b/src/main/java/dev/rgbmc/folia/FakePlugin.java
new file mode 100644
index 0000000000000000000000000000000000000000..f245258c456f44543752d8fbb01b371587f36046
--- /dev/null
+++ b/src/main/java/dev/rgbmc/folia/FakePlugin.java
@@ -0,0 +1,182 @@
+package dev.rgbmc.folia;
+
+import io.papermc.paper.plugin.configuration.PluginMeta;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.Server;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.event.Event;
+import org.bukkit.event.Listener;
+import org.bukkit.generator.BiomeProvider;
+import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.permissions.PermissionDefault;
+import org.bukkit.plugin.*;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.io.InputStream;
+import java.util.*;
+import java.util.logging.Logger;
+import java.util.regex.Pattern;
+
+public class FakePlugin implements Plugin {
+    @Override
+    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {
+        return false;
+    }
+
+    @Override
+    public @Nullable List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {
+        return new ArrayList<>();
+    }
+
+    @Override
+    public @NotNull File getDataFolder() {
+        return new File(System.getProperty("user.dir"));
+    }
+
+    @Override
+    public @NotNull PluginDescriptionFile getDescription() {
+        return new PluginDescriptionFile("Folia",
+            "Folia",new ArrayList<>(),
+            "folia.folia.Folia", "",
+            new ArrayList<>(), new ArrayList<>(),
+            new ArrayList<>(), "1.0.0",
+            new HashMap<>(), "Folia Fake Plugin",
+            List.of("PaperMC"), new ArrayList<>(),
+            "https://papermc.io", "Folia",
+            PluginLoadOrder.STARTUP, new ArrayList<>(),
+            PermissionDefault.FALSE, new HashSet<>(),
+            "1.19.4", new ArrayList<>());
+    }
+
+    @NotNull
+    @Override
+    public PluginMeta getPluginMeta() {
+        return getDescription();
+    }
+
+    @Override
+    public @NotNull FileConfiguration getConfig() {
+        return null;
+    }
+
+    @Override
+    public @Nullable InputStream getResource(@NotNull String filename) {
+        return null;
+    }
+
+    @Override
+    public void saveConfig() {
+
+    }
+
+    @Override
+    public void saveDefaultConfig() {
+
+    }
+
+    @Override
+    public void saveResource(@NotNull String resourcePath, boolean replace) {
+
+    }
+
+    @Override
+    public void reloadConfig() {
+
+    }
+
+    @Override
+    public @NotNull PluginLoader getPluginLoader() {
+        Plugin fakePlugin = this;
+        return new PluginLoader() {
+            @Override
+            public @NotNull Plugin loadPlugin(@NotNull File file) throws InvalidPluginException, UnknownDependencyException {
+                return fakePlugin;
+            }
+
+            @Override
+            public @NotNull PluginDescriptionFile getPluginDescription(@NotNull File file) throws InvalidDescriptionException {
+                return getDescription();
+            }
+
+            @Override
+            public @NotNull Pattern[] getPluginFileFilters() {
+                return new Pattern[0];
+            }
+
+            @Override
+            public @NotNull Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull Listener listener, @NotNull Plugin plugin) {
+                return new HashMap<>();
+            }
+
+            @Override
+            public void enablePlugin(@NotNull Plugin plugin) {
+
+            }
+
+            @Override
+            public void disablePlugin(@NotNull Plugin plugin) {
+
+            }
+        };
+    }
+
+    @Override
+    public @NotNull Server getServer() {
+        return Bukkit.getServer();
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return true;
+    }
+
+    @Override
+    public void onDisable() {
+
+    }
+
+    @Override
+    public void onLoad() {
+
+    }
+
+    @Override
+    public void onEnable() {
+
+    }
+
+    @Override
+    public boolean isNaggable() {
+        return false;
+    }
+
+    @Override
+    public void setNaggable(boolean canNag) {
+
+    }
+
+    @Override
+    public @Nullable ChunkGenerator getDefaultWorldGenerator(@NotNull String worldName, @Nullable String id) {
+        return MinecraftServer.getServer().server.getGenerator(worldName);
+    }
+
+    @Override
+    public @Nullable BiomeProvider getDefaultBiomeProvider(@NotNull String worldName, @Nullable String id) {
+        return MinecraftServer.getServer().server.getBiomeProvider(worldName);
+    }
+
+    @Override
+    public @NotNull Logger getLogger() {
+        return Bukkit.getLogger();
+    }
+
+    @Override
+    public @NotNull String getName() {
+        return "Folia";
+    }
+}
diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index b9095f559472dd92375ea719886913f606f0374c..6d98e6a29f12c57031ba951c013501f5ec3c876d 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -349,7 +349,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         final int sectionX = pos.getX() >> 4;
         final int sectionY = Mth.clamp(pos.getY() >> 4, this.minSection, this.maxSection);
         final int sectionZ = pos.getZ() >> 4;
-        TickThread.ensureTickThread(this.world, sectionX, sectionZ, "Cannot add entity off-main thread");
+        //TickThread.ensureTickThread(this.world, sectionX, sectionZ, "Cannot add entity off-main thread"); //DirtyFolia - Removed check
 
         if (entity.isRemoved()) {
             LOGGER.warn("Refusing to add removed entity: " + entity);
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
index d496ea6a583f71ddfc17ada1424c8c7a026fdf4d..d5b1b14ad00019052b5d51f230a6b29d03a0919a 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
@@ -48,6 +48,7 @@ import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.locks.LockSupport;
@@ -339,16 +340,16 @@ public final class ChunkHolderManager {
 
         final DecimalFormat format = new DecimalFormat("#0.00");
 
-        int saved = 0;
+        AtomicInteger saved = new AtomicInteger(0);
 
         final long start = System.nanoTime();
         long lastLog = start;
-        boolean needsFlush = false;
+        AtomicBoolean needsFlush = new AtomicBoolean(false);
         final int flushInterval = 50;
 
-        int savedChunk = 0;
-        int savedEntity = 0;
-        int savedPoi = 0;
+        AtomicInteger savedChunk = new AtomicInteger(0);
+        AtomicInteger savedEntity = new AtomicInteger(0);
+        AtomicInteger savedPoi = new AtomicInteger(0);
 
         for (int i = 0, len = holders.size(); i < len; ++i) {
             final NewChunkHolder holder = holders.get(i);
@@ -359,34 +360,35 @@ public final class ChunkHolderManager {
             }
             // Folia end - region threading
             try {
-                final NewChunkHolder.SaveStat saveStat = holder.save(shutdown, false);
-                if (saveStat != null) {
-                    ++saved;
-                    needsFlush = flush;
-                    if (saveStat.savedChunk()) {
-                        ++savedChunk;
-                    }
-                    if (saveStat.savedEntityChunk()) {
-                        ++savedEntity;
-                    }
-                    if (saveStat.savedPoiChunk()) {
-                        ++savedPoi;
+                holder.save(shutdown, false).addAsynchronousWaiter((saveStat, throwable) -> {
+                    if (saveStat != null) {
+                        saved.incrementAndGet();
+                        needsFlush.set(flush);
+                        if (saveStat.savedChunk()) {
+                            savedChunk.incrementAndGet();
+                        }
+                        if (saveStat.savedEntityChunk()) {
+                            savedEntity.incrementAndGet();
+                        }
+                        if (saveStat.savedPoiChunk()) {
+                            savedPoi.incrementAndGet();
+                        }
                     }
-                }
+                });
             } catch (final ThreadDeath thr) {
                 throw thr;
             } catch (final Throwable thr) {
                 LOGGER.error("Failed to save chunk (" + holder.chunkX + "," + holder.chunkZ + ") in world '" + this.world.getWorld().getName() + "'", thr);
             }
-            if (needsFlush && (saved % flushInterval) == 0) {
-                needsFlush = false;
+            if (needsFlush.get() && (saved.get() % flushInterval) == 0) {
+                needsFlush.set(false);
                 RegionFileIOThread.partialFlush(flushInterval / 2);
             }
             if (logProgress) {
                 final long currTime = System.nanoTime();
                 if ((currTime - lastLog) > TimeUnit.SECONDS.toNanos(10L)) {
                     lastLog = currTime;
-                    LOGGER.info("Saved " + saved + " chunks (" + format.format((double)(i+1)/(double)len * 100.0) + "%) in world '" + this.world.getWorld().getName() + "'");
+                    LOGGER.info("Saved " + saved.get() + " chunks (" + format.format((double)(i+1)/(double)len * 100.0) + "%) in world '" + this.world.getWorld().getName() + "'");
                 }
             }
         }
@@ -401,7 +403,7 @@ public final class ChunkHolderManager {
             }
         }
         if (logProgress) {
-            LOGGER.info("Saved " + savedChunk + " block chunks, " + savedEntity + " entity chunks, " + savedPoi + " poi chunks in world '" + this.world.getWorld().getName() + "' in " + format.format(1.0E-9 * (System.nanoTime() - start)) + "s");
+            LOGGER.info("Saved " + savedChunk.get() + " block chunks, " + savedEntity + " entity chunks, " + savedPoi + " poi chunks in world '" + this.world.getWorld().getName() + "' in " + format.format(1.0E-9 * (System.nanoTime() - start)) + "s");
         }
     }
 
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
index b84bfc9513a13e365f2bd471b3c77058638d1384..85a9f0c8c5269b658eed204efb44b4d0065c7494 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
@@ -48,6 +48,7 @@ public final class ChunkTaskScheduler {
     static int newChunkSystemLoadParallelism;
 
     public static ca.spottedleaf.concurrentutil.executor.standard.PrioritisedThreadPool workerThreads;
+    private boolean halted = false; //Folia, no need to worry about thread safety, only needed by global thread when set by global thread
 
     private static boolean initialised = false;
 
@@ -813,7 +814,18 @@ public final class ChunkTaskScheduler {
                         !this.parallelGenExecutor.isActive() &&
                         !this.loadExecutor.isActive()
                 ) {
-                    return true;
+                    //return true;
+                    AtomicBoolean bool = new AtomicBoolean(true);
+                    this.world.regioniser.computeForAllRegionsUnsynchronised(region -> {
+                        if (!region.halt()) {
+                            bool.set(false);
+                        }
+                    });
+                    if (bool.get()){
+                        this.halted = true;
+                        return true;
+                    }
+                    // DirtyFolia - Support world api
                 }
                 if ((System.nanoTime() - time) >= maxWaitNS) {
                     return false;
@@ -821,9 +833,14 @@ public final class ChunkTaskScheduler {
             }
         }
 
+        this.halted = true;
         return true;
     }
 
+    public boolean isHalted() {
+        return this.halted;
+    }
+
     public static final ArrayDeque<ChunkInfo> WAITING_CHUNKS = new ArrayDeque<>(); // stack
 
     public static final class ChunkInfo {
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
index f1c68d9850ece7532a8607db955eaa4fc3a4bf05..a68d3ab3aa5c02d23545db4c9388e361835e3099 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
@@ -11,6 +11,7 @@ import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
 import com.mojang.logging.LogUtils;
+import dev.rgbmc.folia.FakePlugin;
 import io.papermc.paper.chunk.system.io.RegionFileIOThread;
 import io.papermc.paper.chunk.system.poi.PoiChunk;
 import io.papermc.paper.util.CoordinateUtils;
@@ -35,6 +36,7 @@ import net.minecraft.world.level.chunk.ImposterProtoChunk;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.storage.ChunkSerializer;
 import net.minecraft.world.level.chunk.storage.EntityStorage;
+import org.bukkit.Bukkit;
 import org.slf4j.Logger;
 import java.lang.invoke.VarHandle;
 import java.util.ArrayList;
@@ -1748,54 +1750,65 @@ public final class NewChunkHolder {
 
     public static final record SaveStat(boolean savedChunk, boolean savedEntityChunk, boolean savedPoiChunk) {}
 
-    public SaveStat save(final boolean shutdown, final boolean unloading) {
-        TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Cannot save data off-main");
-
-        ChunkAccess chunk = this.getCurrentChunk();
-        PoiChunk poi = this.getPoiChunk();
-        ChunkEntitySlices entities = this.getEntityChunk();
-        boolean executedUnloadTask = false;
-
-        if (shutdown) {
-            // make sure that the async unloads complete
-            if (this.unloadState != null) {
-                // must have errored during unload
-                chunk = this.unloadState.chunk();
-                poi = this.unloadState.poiChunk();
-                entities = this.unloadState.entityChunk();
-            }
-            final UnloadTask chunkUnloadTask = this.chunkDataUnload;
-            final DelayedPrioritisedTask chunkDataUnloadTask = chunkUnloadTask == null ? null : chunkUnloadTask.task();
-            if (chunkDataUnloadTask != null) {
-                final PrioritisedExecutor.PrioritisedTask unloadTask = chunkDataUnloadTask.getTask();
-                if (unloadTask != null) {
-                    executedUnloadTask = unloadTask.execute();
+    public Completable<SaveStat> save(final boolean shutdown, final boolean unloading) {
+        //TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Cannot save data off-main"); // DirtyFolia - Removed check
+
+        Completable<SaveStat> future = new Completable<>();
+        Runnable runnable = () -> {
+            ChunkAccess chunk = this.getCurrentChunk();
+            PoiChunk poi = this.getPoiChunk();
+            ChunkEntitySlices entities = this.getEntityChunk();
+            boolean executedUnloadTask = false;
+
+            if (shutdown) {
+                // make sure that the async unloads complete
+                if (this.unloadState != null) {
+                    // must have errored during unload
+                    chunk = this.unloadState.chunk();
+                    poi = this.unloadState.poiChunk();
+                    entities = this.unloadState.entityChunk();
+                }
+                final UnloadTask chunkUnloadTask = this.chunkDataUnload;
+                final DelayedPrioritisedTask chunkDataUnloadTask = chunkUnloadTask == null ? null : chunkUnloadTask.task();
+                if (chunkDataUnloadTask != null) {
+                    final PrioritisedExecutor.PrioritisedTask unloadTask = chunkDataUnloadTask.getTask();
+                    if (unloadTask != null) {
+                        executedUnloadTask = unloadTask.execute();
+                    }
                 }
             }
-        }
 
-        boolean canSaveChunk = !(chunk instanceof LevelChunk levelChunk && levelChunk.mustNotSave) &&
-                                (chunk != null && ((shutdown || chunk instanceof LevelChunk) && chunk.isUnsaved()));
-        boolean canSavePOI = !(chunk instanceof LevelChunk levelChunk && levelChunk.mustNotSave) && (poi != null && poi.isDirty());
-        boolean canSaveEntities = entities != null;
+            boolean canSaveChunk = !(chunk instanceof LevelChunk levelChunk && levelChunk.mustNotSave) &&
+                (chunk != null && ((shutdown || chunk instanceof LevelChunk) && chunk.isUnsaved()));
+            boolean canSavePOI = !(chunk instanceof LevelChunk levelChunk && levelChunk.mustNotSave) && (poi != null && poi.isDirty());
+            boolean canSaveEntities = entities != null;
 
-        try (co.aikar.timings.Timing ignored = this.world.timings.chunkSave.startTiming()) { // Paper
-            if (canSaveChunk) {
-                canSaveChunk = this.saveChunk(chunk, unloading);
-            }
-            if (canSavePOI) {
-                canSavePOI = this.savePOI(poi, unloading);
-            }
-            if (canSaveEntities) {
-                // on shutdown, we need to force transient entity chunks to save
-                canSaveEntities = this.saveEntities(entities, unloading || shutdown);
-                if (unloading || shutdown) {
-                    this.lastEntityUnload = null;
+            try (co.aikar.timings.Timing ignored = this.world.timings.chunkSave.startTiming()) { // Paper
+                if (canSaveChunk) {
+                    canSaveChunk = this.saveChunk(chunk, unloading);
+                }
+                if (canSavePOI) {
+                    canSavePOI = this.savePOI(poi, unloading);
+                }
+                if (canSaveEntities) {
+                    // on shutdown, we need to force transient entity chunks to save
+                    canSaveEntities = this.saveEntities(entities, unloading || shutdown);
+                    if (unloading || shutdown) {
+                        this.lastEntityUnload = null;
+                    }
                 }
             }
-        }
 
-        return executedUnloadTask | canSaveChunk | canSaveEntities | canSavePOI ? new SaveStat(executedUnloadTask || canSaveChunk, canSaveEntities, canSavePOI): null;
+            SaveStat saveStat = executedUnloadTask | canSaveChunk | canSaveEntities | canSavePOI ? new SaveStat(executedUnloadTask || canSaveChunk, canSaveEntities, canSavePOI): null;
+            future.complete(saveStat);
+        };
+
+        if (TickThread.isTickThreadFor(this.world, this.chunkX, this.chunkZ)) {
+            runnable.run();
+        } else {
+            Bukkit.getRegionScheduler().run(new FakePlugin(), this.world.getWorld(), this.chunkX, this.chunkZ, scheduledTask -> runnable.run());
+        }
+        return future;
     }
 
     static final class AsyncChunkSerializeTask implements Runnable {
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
index 3b5572662c53715cd63772db90904dd1bed32390..0a7eba09a24ba6a70a00cd8f75e4b7436b2f6c1e 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
@@ -67,6 +67,10 @@ class PaperPluginInstanceManager {
         return this.lookupNames.get(name.replace(' ', '_').toLowerCase(java.util.Locale.ENGLISH)); // Paper
     }
 
+    public void removePlugin(String name) { //Folia (Third-Party)
+        this.lookupNames.remove(name.replace(' ', '_').toLowerCase(java.util.Locale.ENGLISH));
+    }
+
     public @NotNull Plugin[] getPlugins() {
         return this.plugins.toArray(new Plugin[0]);
     }
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
index dab211c458311869c61779305580a1c7da830f71..bfa09578b3cb51a2797be3de6cc0e8248666f9b5 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
@@ -238,4 +238,8 @@ public class PaperPluginManagerImpl implements PluginManager, DependencyContext
     public MutableGraph<String> getInstanceManagerGraph() {
         return instanceManager.getDependencyGraph();
     }
+
+    public void removePlugin(String name) { //Folia (Third-Party)
+        instanceManager.removePlugin(name);
+    }
 }
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginMeta.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginMeta.java
index b930bd722caf6ecc6e2d584535cdd7a8924d9e08..3cf2cd8e77cb408391253efdf59fd66ad9c1db72 100644
--- a/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginMeta.java
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginMeta.java
@@ -232,6 +232,9 @@ public class PaperPluginMeta implements PluginMeta {
     // Folia start
     @Override
     public boolean isFoliaSupported() {
+        if (System.getProperty("folia.force-load-all-plugins", "false").equalsIgnoreCase("true")) { // Folia (Third-Party)
+            return true;
+        }
         return this.foliaSupported;
     }
     // Folia end
diff --git a/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java b/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
index 8e31c6ee9ee16aff699e124a9b0554eaafa5c1ac..71970f34679a26c013b45f12413675b76f7c7545 100644
--- a/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
+++ b/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
@@ -55,9 +55,16 @@ public final class RegionizedServer {
     }
 
     public void addWorld(final ServerLevel world) {
+        if (this.worlds.contains(world)) {
+            throw new IllegalStateException("World " + world.getTypeKey() + " was already there!");
+        }
         this.worlds.add(world);
     }
 
+    public void removeWorld(ServerLevel handle) {
+        this.worlds.remove(handle);
+    }
+
     public void init() {
         // call init event _before_ scheduling anything
         new RegionizedServerInitEvent().callEvent();
diff --git a/src/main/java/io/papermc/paper/threadedregions/ThreadedRegionizer.java b/src/main/java/io/papermc/paper/threadedregions/ThreadedRegionizer.java
index 72a2b81a0a4dc6aab02d0dbad713ea882887d85f..f04eafe48e0779cbd6854eddbbacae3811cd47ab 100644
--- a/src/main/java/io/papermc/paper/threadedregions/ThreadedRegionizer.java
+++ b/src/main/java/io/papermc/paper/threadedregions/ThreadedRegionizer.java
@@ -879,6 +879,26 @@ public final class ThreadedRegionizer<R extends ThreadedRegionizer.ThreadedRegio
             }
         }
 
+        public boolean halt() {
+            if (this.state == STATE_DEAD) return true; //Already killed, no need to lock
+            try {
+                this.regioniser.acquireWriteLock();
+                return switch (this.state) {
+                    case STATE_TRANSIENT, STATE_READY -> {
+                        //We shouldn't remove it from world, we just stop it from being scheduled
+                        this.regioniser.callbacks.onRegionInactive(this);
+                        this.state = STATE_DEAD;
+                        yield true;
+                    }
+                    case STATE_TICKING -> false;
+                    case STATE_DEAD -> true;
+                    default -> throw new IllegalStateException("Unknown state: " + this.state);
+                };
+            } finally {
+                this.regioniser.releaseWriteLock();
+            }
+        }
+
         private boolean isDead() {
             return this.state == STATE_DEAD;
         }
diff --git a/src/main/java/io/papermc/paper/threadedregions/TickRegions.java b/src/main/java/io/papermc/paper/threadedregions/TickRegions.java
index 6c76c70574642aa4f3a8fce74e4608781ce132ec..0825069c79e25b56982f85cd880fd208e75f7b26 100644
--- a/src/main/java/io/papermc/paper/threadedregions/TickRegions.java
+++ b/src/main/java/io/papermc/paper/threadedregions/TickRegions.java
@@ -196,6 +196,13 @@ public final class TickRegions implements ThreadedRegionizer.RegionCallbacks<Tic
             return ret;
         }
 
+        public <T> T getDataAfterHalt(final RegionizedData<T> regionizedData) {
+            if (!world.chunkTaskScheduler.isHalted()) {
+                throw new IllegalStateException("World isn't halted");
+            }
+            return this.getOrCreateRegionizedData(regionizedData);
+        }
+
         @Override
         public void split(final ThreadedRegionizer<TickRegionData, TickRegionSectionData> regioniser,
                           final Long2ReferenceOpenHashMap<ThreadedRegionizer.ThreadedRegion<TickRegionData, TickRegionSectionData>> into,
diff --git a/src/main/java/io/papermc/paper/util/TickThread.java b/src/main/java/io/papermc/paper/util/TickThread.java
index cb453dd110fc37fae75257a4576512126207763e..f80c5aed3d88655adf8f2fcb6005e847366b0bd7 100644
--- a/src/main/java/io/papermc/paper/util/TickThread.java
+++ b/src/main/java/io/papermc/paper/util/TickThread.java
@@ -136,6 +136,10 @@ public class TickThread extends Thread {
     }
 
     public static boolean isTickThreadFor(final ServerLevel world, final int chunkX, final int chunkZ) {
+        if (world.chunkTaskScheduler.isHalted()) { //As soon as we halt the activity, it's the global tick thread's propriety
+            return RegionizedServer.isGlobalTickThread() || isShutdownThread();
+        }
+
         final ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region =
             TickRegionScheduler.getCurrentRegion();
         if (region == null) {
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 681cd79ce24fe5d952e987d46e2fd8df07a0f8a1..7dcf4e791b8d16fccc42450380bf35b25643f6a5 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -181,7 +181,7 @@ public class Commands {
         //RideCommand.register(this.dispatcher); // Folia - region threading - TODO later
         SayCommand.register(this.dispatcher);
         //ScheduleCommand.register(this.dispatcher); // Folia - region threading
-        //ScoreboardCommand.register(this.dispatcher); // Folia - region threading - TODO later
+        ScoreboardCommand.register(this.dispatcher); // Folia - region threading // DirtyFolia - Recover
         SeedCommand.register(this.dispatcher, environment != Commands.CommandSelection.INTEGRATED);
         SetBlockCommand.register(this.dispatcher, commandRegistryAccess);
         SetSpawnCommand.register(this.dispatcher);
@@ -191,8 +191,8 @@ public class Commands {
         StopSoundCommand.register(this.dispatcher);
         SummonCommand.register(this.dispatcher, commandRegistryAccess);
         //TagCommand.register(this.dispatcher); // Folia - region threading - TODO later
-        //TeamCommand.register(this.dispatcher); // Folia - region threading - TODO later
-        //TeamMsgCommand.register(this.dispatcher); // Folia - region threading - TODO later
+        TeamCommand.register(this.dispatcher); // Folia - region threading - TODO later
+        TeamMsgCommand.register(this.dispatcher); // Folia - region threading // DirtyFolia - Recover
         TeleportCommand.register(this.dispatcher);
         TellRawCommand.register(this.dispatcher);
         TimeCommand.register(this.dispatcher);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 1b3f895b51b634ee9cf69cdbbfd7a1e600de16f0..334278d4613559a13b545fd24b60e68beeca9146 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -14,6 +14,9 @@ import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import dev.rgbmc.folia.CachedWorldData;
+import dev.rgbmc.folia.FakePlugin;
+import io.papermc.paper.configuration.GlobalConfiguration;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import java.awt.image.BufferedImage;
@@ -161,6 +164,7 @@ import net.minecraft.world.level.storage.PrimaryLevelData;
 import net.minecraft.world.level.storage.ServerLevelData;
 import net.minecraft.world.level.storage.WorldData;
 import net.minecraft.world.level.storage.loot.LootDataManager;
+import org.bukkit.command.ConsoleCommandSender;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -679,6 +683,35 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
         this.server.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.STARTUP));
         this.connection.acceptConnections();
+
+        ConsoleCommandSender sender = Bukkit.getConsoleSender();
+        sender.sendMessage(net.kyori.adventure.text.Component.text("Checking version, please wait...", net.kyori.adventure.text.format.NamedTextColor.WHITE, net.kyori.adventure.text.format.TextDecoration.ITALIC)); // Paper
+        new Thread(new Runnable() {
+
+            @Override
+            public void run() {
+                String version = Bukkit.getVersion();
+                // Paper start
+                net.kyori.adventure.text.Component component;
+                if (version.startsWith("null")) { // running from ide?
+                    component = net.kyori.adventure.text.Component.text("Unknown version, custom build?", net.kyori.adventure.text.format.NamedTextColor.YELLOW);
+                } else {
+                    component = Bukkit.getUnsafe().getVersionFetcher().getVersionMessage(version);
+                }
+                final net.kyori.adventure.text.Component message = net.kyori.adventure.text.TextComponent.ofChildren(
+                    net.kyori.adventure.text.Component.text(Bukkit.getVersionMessage(), net.kyori.adventure.text.format.NamedTextColor.WHITE),
+                    net.kyori.adventure.text.Component.newline(),
+                    component
+                );
+                net.kyori.adventure.text.Component versionMessage = net.kyori.adventure.text.Component.text()
+                    .append(message)
+                    .hoverEvent(net.kyori.adventure.text.Component.text("Click to copy to clipboard", net.kyori.adventure.text.format.NamedTextColor.WHITE))
+                    .clickEvent(net.kyori.adventure.text.event.ClickEvent.copyToClipboard(net.kyori.adventure.text.serializer.plain.PlainComponentSerializer.plain().serialize(message)))
+                    .build();
+                // Paper end
+                sender.sendMessage(versionMessage);
+            }
+        }).start(); // DirtyFolia - Check server version when world loads
     }
     // CraftBukkit end
 
@@ -1678,6 +1711,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 for (final io.papermc.paper.chunk.SingleThreadChunkRegionManager regionManager : worldserver.getChunkSource().chunkMap.regionManagers) {
                     regionManager.recalculateRegions();
                 }
+                Bukkit.getRegionScheduler().run(new FakePlugin(), worldserver.getWorld(), 0, 0, scheduledTask -> { // Folia (Third Party)
+                    CachedWorldData.update(worldserver.getWorld().getName(), worldserver.getCurrentWorldData());
+                });
                 // Paper end
                 worldserver.timings.doTick.stopTiming(); // Spigot
             } catch (Throwable throwable) {
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index af35fd63b090aa3d89bc60cb9cb7694b5f502681..9d0321d8f2f2c1903b77647017dfb88da314f733 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -215,53 +215,47 @@ public class ServerChunkCache extends ChunkSource {
     @Override
     public ChunkAccess getChunk(int x, int z, ChunkStatus leastStatus, boolean create) {
         final int x1 = x; final int z1 = z; // Paper - conflict on variable change
-        if (!io.papermc.paper.util.TickThread.isTickThread()) { // Paper - rewrite chunk system
-            return (ChunkAccess) CompletableFuture.supplyAsync(() -> {
-                return this.getChunk(x, z, leastStatus, create);
-            }, this.mainThreadProcessor).join();
-        } else {
-            // Paper start - optimise for loaded chunks
-            LevelChunk ifLoaded = this.getChunkAtIfLoadedMainThread(x, z);
-            if (ifLoaded != null) {
-                return ifLoaded;
-            }
-            // Paper end
-            ProfilerFiller gameprofilerfiller = this.level.getProfiler();
+        // Paper start - optimise for loaded chunks
+        LevelChunk ifLoaded = this.getChunkAtIfLoadedMainThread(x, z);
+        if (ifLoaded != null) {
+            return ifLoaded;
+        }
+        // Paper end
+        ProfilerFiller gameprofilerfiller = this.level.getProfiler();
 
-            gameprofilerfiller.incrementCounter("getChunk");
-            long k = ChunkPos.asLong(x, z);
+        gameprofilerfiller.incrementCounter("getChunk");
+        long k = ChunkPos.asLong(x, z);
 
-            ChunkAccess ichunkaccess;
+        ChunkAccess ichunkaccess;
 
-            // Paper - rewrite chunk system - there are no correct callbacks to remove items from cache in the new chunk system
+        // Paper - rewrite chunk system - there are no correct callbacks to remove items from cache in the new chunk system
 
-            gameprofilerfiller.incrementCounter("getChunkCacheMiss");
-            CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(x, z, leastStatus, create, true); // Paper
-            ServerChunkCache.MainThreadExecutor chunkproviderserver_b = this.mainThreadProcessor;
+        gameprofilerfiller.incrementCounter("getChunkCacheMiss");
+        CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(x, z, leastStatus, create, true); // Paper
+        ServerChunkCache.MainThreadExecutor chunkproviderserver_b = this.mainThreadProcessor;
 
-            Objects.requireNonNull(completablefuture);
-            if (!completablefuture.isDone()) { // Paper
-                // Paper start - async chunk io/loading
-                io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.pushChunkWait(this.level, x1, z1); // Paper - rewrite chunk system
-                // Paper end
-                com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x1, z1); // Paper - sync load info
-                this.level.timings.syncChunkLoad.startTiming(); // Paper
+        Objects.requireNonNull(completablefuture);
+        if (!completablefuture.isDone()) { // Paper
+            // Paper start - async chunk io/loading
+            io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.pushChunkWait(this.level, x1, z1); // Paper - rewrite chunk system
+            // Paper end
+            com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x1, z1); // Paper - sync load info
+            this.level.timings.syncChunkLoad.startTiming(); // Paper
             chunkproviderserver_b.managedBlock(completablefuture::isDone);
-                io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.popChunkWait(); // Paper - async chunk debug  // Paper - rewrite chunk system
-                this.level.timings.syncChunkLoad.stopTiming(); // Paper
-            } // Paper
-            ichunkaccess = (ChunkAccess) ((Either) completablefuture.join()).map((ichunkaccess1) -> {
-                return ichunkaccess1;
-            }, (playerchunk_failure) -> {
-                if (create) {
-                    throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + playerchunk_failure));
-                } else {
-                    return null;
-                }
-            });
-            this.storeInCache(k, ichunkaccess, leastStatus);
-            return ichunkaccess;
-        }
+            io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.popChunkWait(); // Paper - async chunk debug  // Paper - rewrite chunk system
+            this.level.timings.syncChunkLoad.stopTiming(); // Paper
+        } // Paper
+        ichunkaccess = (ChunkAccess) ((Either) completablefuture.join()).map((ichunkaccess1) -> {
+            return ichunkaccess1;
+        }, (playerchunk_failure) -> {
+            if (create) {
+                throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + playerchunk_failure));
+            } else {
+                return null;
+            }
+        });
+        this.storeInCache(k, ichunkaccess, leastStatus);
+        return ichunkaccess;
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 8fd9e3cee5a671ef8425311371cde57449ef1d8e..0c995b426dc90815a0360a834fcf80f14547337b 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -222,6 +222,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     public final UUID uuid;
     // Folia - region threading
     private final alternate.current.wire.WireHandler wireHandler = new alternate.current.wire.WireHandler(this); // Paper - optimize redstone (Alternate Current)
+    public boolean unloadLocked = false; // DirtyFolia - Check unloading
     public static Throwable getAddToWorldStackTrace(Entity entity) {
         final Throwable thr = new Throwable(entity + " Added to world at " + new java.util.Date());
         io.papermc.paper.util.StacktraceDeobfuscator.INSTANCE.deobfuscateThrowable(thr);
@@ -2659,6 +2660,17 @@ public class ServerLevel extends Level implements WorldGenLevel {
         chunk.unpackTicks(this.getRedstoneGameTime()); // Folia - region threading
     }
 
+    public long getRedstoneGameTime(int chunkX, int chunkZ) {
+        return this.getCurrentWorldData(chunkX, chunkZ).getRedstoneGameTime();
+    }
+
+    public io.papermc.paper.threadedregions.RegionizedWorldData getCurrentWorldData(int chunkX, int chunkZ) {
+        return chunkTaskScheduler.isHalted()
+            ? Objects.requireNonNull(regioniser.getRegionAtUnsynchronised(chunkX, chunkZ), "Chunk was not present on world activity halt")
+            .getData().getDataAfterHalt(worldRegionData)
+            : getCurrentWorldData();
+    }
+
     public void onStructureStartsAvailable(ChunkAccess chunk) {
         // Folia start - region threading
         // no longer needs to be on main
@@ -2741,7 +2753,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         public void onCreated(Entity entity) {}
 
         public void onDestroyed(Entity entity) {
-            // ServerLevel.this.getScoreboard().entityRemoved(entity); // Folia - region threading
+            ServerLevel.this.getScoreboard().entityRemoved(entity); // Folia - region threading // DirtyFolia - Recover
         }
 
         public void onTickingStart(Entity entity) {
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index d58e8211fc765c61548ac2a180de87dd2934ba37..193aa56945c04a9d44d1a2da84e4bb2ae52643d5 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1549,9 +1549,10 @@ public class ServerPlayer extends Player {
     @Nullable
     public Entity changeDimension(ServerLevel worldserver, PlayerTeleportEvent.TeleportCause cause) {
         // Folia start - region threading
-        if (true) {
+        /*if (true) {
             throw new UnsupportedOperationException("Must use teleportAsync while in region threading");
-        }
+        }*/
+        // DirtyFolia - Removed check
         // Folia end - region threading
         // CraftBukkit end
         if (this.isSleeping()) return this; // CraftBukkit - SPIGOT-3154
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index d4620ddfcd06a037f647ab0a8938797405e001b2..4d704a0275d73ed3f68cd8f08bf998db5b120925 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -377,7 +377,7 @@ public abstract class PlayerList {
         this.sendPlayerPermissionLevel(player);
         player.getStats().markAllDirty();
         player.getRecipeBook().sendInitialRecipeBook(player);
-        if (false) this.updateEntireScoreboard(worldserver1.getScoreboard(), player); // Folia - region threading
+        this.updateEntireScoreboard(worldserver1.getScoreboard(), player); // Folia - region threading // DirtyFolia - Recover
         this.server.invalidateStatus();
         MutableComponent ichatmutablecomponent;
 
@@ -551,7 +551,7 @@ public abstract class PlayerList {
         // Paper start - Add to collideRule team if needed
         final Scoreboard scoreboard = this.getServer().getLevel(Level.OVERWORLD).getScoreboard();
         final PlayerTeam collideRuleTeam = scoreboard.getPlayerTeam(this.collideRuleTeamName);
-        if (false && this.collideRuleTeamName != null && collideRuleTeam != null && player.getTeam() == null) { // Folia - region threading
+        if (this.collideRuleTeamName != null && collideRuleTeam != null && player.getTeam() == null) { // Folia - region threading // DirtyFolia - Removed check
             scoreboard.addPlayerToTeam(player.getScoreboardName(), collideRuleTeam);
         }
         // Paper end
@@ -682,7 +682,7 @@ public abstract class PlayerList {
         // CraftBukkit end
 
         // Paper start - Remove from collideRule team if needed
-        if (false && this.collideRuleTeamName != null) { // Folia - region threading
+        if (this.collideRuleTeamName != null) { // Folia - region threading // DirtyFolia - Removed check
             final Scoreboard scoreBoard = this.server.getLevel(Level.OVERWORLD).getScoreboard();
             final PlayerTeam team = scoreBoard.getPlayersTeam(this.collideRuleTeamName);
             if (entityplayer.getTeam() == team && team != null) {
@@ -870,9 +870,10 @@ public abstract class PlayerList {
     public ServerPlayer respawn(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, RespawnReason reason, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag...respawnFlags) {
         // Paper end
         // Folia start - region threading
-        if (true) {
+        /*if (true) {
             throw new UnsupportedOperationException("Must use teleportAsync while in region threading");
-        }
+        }*/
+        // DirtyFolia - Removed check
         // Folia end - region threading
         entityplayer.stopRiding(); // CraftBukkit
         this.players.remove(entityplayer);
@@ -1446,7 +1447,7 @@ public abstract class PlayerList {
         // CraftBukkit end
 
         // Paper start - Remove collideRule team if it exists
-        if (false && this.collideRuleTeamName != null) { // Folia - region threading
+        if (this.collideRuleTeamName != null) { // Folia - region threading // DirtyFolia - Removed check
             final Scoreboard scoreboard = this.getServer().getLevel(Level.OVERWORLD).getScoreboard();
             final PlayerTeam team = scoreboard.getPlayersTeam(this.collideRuleTeamName);
             if (team != null) scoreboard.removePlayerTeam(team);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 7dcba5ed8ad3cda9951c6193273261754e8ef63b..93382e604c4467931c604ddefdbfc8c2ee4e29e3 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -7,6 +7,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.common.collect.UnmodifiableIterator;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.event.entity.EntityPortalReadyEvent;
 import it.unimi.dsi.fastutil.objects.Object2DoubleArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2DoubleMap;
 import java.util.Arrays;
@@ -3048,7 +3049,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 this.portalEntrancePos = pos.immutable();
             }
 
-            this.isInsidePortal = true;
+            if (new org.bukkit.event.entity.EntityPortalEnterEvent(this.getBukkitEntity(), new Location(level.getWorld(), pos.getX(), pos.getY(), pos.getZ())).callEvent()) {
+                this.isInsidePortal = true;
+            }
         }
     }
 
@@ -3247,9 +3250,10 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     @Nullable
     public Team getTeam() {
         // Folia start - region threading
-        if (true) {
+        /*if (true) {
             return null;
-        }
+        }*/
+        // DirtyFolia - Removed check
         // Folia end - region threading
         if (!this.level().paperConfig().scoreboards.allowNonPlayerEntitiesOnScoreboards && !(this instanceof Player)) { return null; } // Paper
         return this.level().getScoreboard().getPlayersTeam(this.getScoreboardName());
@@ -3873,6 +3877,12 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             }
         }
 
+        if (destination.unloadLocked) {
+            IllegalAccessException exception = new IllegalAccessException("Unable to teleport an entity to a world that is unloadingding");
+            exception.printStackTrace();
+            return false;
+        }
+
         // TODO any events that can modify go HERE
 
         // check for same region
@@ -3997,8 +4007,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
 
         ServerLevel destination = this.getServer().getLevel(this.level().getTypeKey() == LevelStem.END ? Level.OVERWORLD : Level.END);
+        EntityPortalReadyEvent event = new io.papermc.paper.event.entity.EntityPortalReadyEvent(this.getBukkitEntity(), destination == null ? null : destination.getWorld(), org.bukkit.PortalType.ENDER);
+        if (!event.callEvent()) {
+            return false;
+        }
+        destination = event.getTargetWorld() == null ? null : ((CraftWorld) event.getTargetWorld()).getHandle();
         if (destination == null) {
             // wat
+            // Set to null or allow end to false
             return false;
         }
 
@@ -4009,8 +4025,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
 
         ServerLevel destination = this.getServer().getLevel(this.level().getTypeKey() == LevelStem.NETHER ? Level.OVERWORLD : Level.NETHER);
+        EntityPortalReadyEvent event = new io.papermc.paper.event.entity.EntityPortalReadyEvent(this.getBukkitEntity(), destination == null ? null : destination.getWorld(), org.bukkit.PortalType.NETHER);
+        if (!event.callEvent()) {
+            return false;
+        }
+        destination = event.getTargetWorld() == null ? null : ((CraftWorld) event.getTargetWorld()).getHandle();
         if (destination == null) {
             // wat
+            // Set to null or allow nether to false
             return false;
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 10c7f5c6fc0e5cb8aafbe125dd68635a37b7b1b9..d682617b89757860987a4e4fa6d17a78a233cf6f 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -857,7 +857,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
         this.hurtTime = nbt.getShort("HurtTime");
         this.deathTime = nbt.getShort("DeathTime"); this.broadcastedDeath = false; // Folia - region threading
         this.lastHurtByMobTimestamp = nbt.getInt("HurtByTimestamp");
-        if (false && nbt.contains("Team", 8)) { // Folia start - region threading
+        if (nbt.contains("Team", 8)) { // Folia start - region threading // DirtyFolia - Removed check
             String s = nbt.getString("Team");
             PlayerTeam scoreboardteam = this.level().getScoreboard().getPlayerTeam(s);
             if (!this.level().paperConfig().scoreboards.allowNonPlayerEntitiesOnScoreboards && !(this instanceof net.minecraft.world.entity.player.Player)) { scoreboardteam = null; } // Paper
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 42727a50ae11cd4d4aa65eb57638bfb164f1e4ac..783411d3d912a6135529a0a79e058d229a1d5f9f 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -15,6 +15,8 @@ import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import dev.rgbmc.folia.CachedWorldData;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -277,7 +279,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public io.papermc.paper.threadedregions.RegionizedWorldData getCurrentWorldData() {
         final io.papermc.paper.threadedregions.RegionizedWorldData ret = io.papermc.paper.threadedregions.TickRegionScheduler.getCurrentRegionizedWorldData();
         if (ret == null) {
-            return ret;
+            return CachedWorldData.get(world.getName()); // DirtyFolia - cache world data
         }
         Level world = ret.world;
         if (world != this) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 4d4e503cfdefb8c8e7f03f5792f354ec0a41c125..0483a86e4053c73245724035ef0b2d83efc71117 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -562,7 +562,7 @@ public class LevelChunk extends ChunkAccess {
     @Nullable
     public BlockEntity getBlockEntity(BlockPos pos, LevelChunk.EntityCreationType creationType) {
         // CraftBukkit start
-        BlockEntity tileentity = level.getCurrentWorldData().capturedTileEntities.get(pos); // Folia - region threading
+        BlockEntity tileentity = this.level.getCurrentWorldData(locX, locZ).capturedTileEntities.get(pos); // Folia - region threading
         if (tileentity == null) {
             tileentity = (BlockEntity) this.blockEntities.get(pos);
         }
@@ -612,7 +612,7 @@ public class LevelChunk extends ChunkAccess {
     }
 
     private boolean isInLevel() {
-        return this.loaded || this.level.isClientSide();
+        return this.loaded && !this.level.chunkTaskScheduler.isHalted(); //Folia, not loaded after halt
     }
 
     boolean isTicking(BlockPos pos) {
@@ -905,7 +905,7 @@ public class LevelChunk extends ChunkAccess {
     @Override
     public boolean isUnsaved() {
         // Paper start - add dirty system to tick lists
-        long gameTime = this.level.getRedstoneGameTime(); // Folia - region threading
+        long gameTime = this.level.getRedstoneGameTime(this.locX, this.locZ); // Folia - region threading
         if (this.blockTicks.isDirty(gameTime) || this.fluidTicks.isDirty(gameTime)) {
             return true;
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index bc938c2a4cb30f3151b600ab88ca5c4e9734f326..cd0c27d4c0c3ba97bc08a6429f3ebc03eee06047 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -411,7 +411,7 @@ public class ChunkSerializer {
         org.spigotmc.AsyncCatcher.catchOp("preparation of chunk data for async save");
 
         final CompoundTag tickLists = new CompoundTag();
-        ChunkSerializer.saveTicks(world, tickLists, chunk.getTicksForSerialization());
+        ChunkSerializer.saveTicks(world, chunk.locX, chunk.locZ, tickLists, chunk.getTicksForSerialization()); //Folia - add coords in case of world halt
 
         ListTag blockEntitiesSerialized = new ListTag();
         for (final BlockPos blockPos : chunk.getBlockEntitiesPos()) {
@@ -613,7 +613,7 @@ public class ChunkSerializer {
             nbttagcompound.put(BLOCK_TICKS_TAG, asyncsavedata.blockTickList);
             nbttagcompound.put(FLUID_TICKS_TAG, asyncsavedata.fluidTickList);
         } else {
-        ChunkSerializer.saveTicks(world, nbttagcompound, chunk.getTicksForSerialization());
+            ChunkSerializer.saveTicks(world, chunk.locX, chunk.locZ, nbttagcompound, chunk.getTicksForSerialization()); //Folia - add coords in case of world halt
         }
         // Paper end
         nbttagcompound.put("PostProcessing", ChunkSerializer.packOffsets(chunk.getPostProcessing()));
@@ -638,8 +638,8 @@ public class ChunkSerializer {
         return nbttagcompound;
     }
 
-    private static void saveTicks(ServerLevel world, CompoundTag nbt, ChunkAccess.TicksToSave tickSchedulers) {
-        long i = world.getRedstoneGameTime(); // Folia - region threading
+    private static void saveTicks(ServerLevel world, int x, int z, CompoundTag nbt, ChunkAccess.TicksToSave tickSchedulers) { //Folia - add coords in case of world halt
+        long i = world.getRedstoneGameTime(x, z); // Folia - region threading
 
         nbt.put("block_ticks", tickSchedulers.blocks().save(i, (block) -> {
             return BuiltInRegistries.BLOCK.getKey(block).toString();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 714db83db78d5bd66d8353bf9b8c4a6b1734fce4..3905fa800646e6c3af88e4841dda7399fb8df4b5 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -261,7 +261,7 @@ import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Kaiiju"; // Kaiiju // Folia // Paper
+    private final String serverName = "DirtyKaiiju"; // DirtyFolia // Kaiiju // Folia // Paper
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
@@ -1271,10 +1271,11 @@ public final class CraftServer implements Server {
 
     @Override
     public World createWorld(WorldCreator creator) {
-        if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet
+        //if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet // DirtyFolia - Removed check
         Preconditions.checkState(this.console.getAllLevels().iterator().hasNext(), "Cannot create additional worlds on STARTUP");
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot create a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         Preconditions.checkArgument(creator != null, "WorldCreator cannot be null");
+        io.papermc.paper.threadedregions.RegionizedServer.ensureGlobalTickThread("World create can be done only on global tick thread");
 
         String name = creator.name();
         ChunkGenerator generator = creator.generator();
@@ -1393,7 +1394,20 @@ public final class CraftServer implements Server {
         }
 
         this.console.addLevel(internal); // Paper - move up
-        this.console.initWorld(internal, worlddata, worlddata, worlddata.worldGenOptions());
+        //Folia start
+        //this.console.initWorld(internal, worlddata, worlddata, worlddata.worldGenOptions());
+        io.papermc.paper.threadedregions.RegionizedServer.getInstance().addWorld(internal);
+        int loadRegionRadius = ((32) >> 4);
+        internal.randomSpawnSelection = new net.minecraft.world.level.ChunkPos(internal.getChunkSource().randomState().sampler().findSpawnPosition());
+        for (int currX = -loadRegionRadius; currX <= loadRegionRadius; ++currX) {
+            for (int currZ = -loadRegionRadius; currZ <= loadRegionRadius; ++currZ) {
+                net.minecraft.world.level.ChunkPos pos = new net.minecraft.world.level.ChunkPos(currX, currZ);
+                internal.chunkSource.addTicketAtLevel(
+                    TicketType.UNKNOWN, pos, io.papermc.paper.chunk.system.scheduling.ChunkHolderManager.MAX_TICKET_LEVEL, pos
+                );
+            }
+        }
+        //Folia end
 
         internal.setSpawnSettings(true, true);
         // Paper - move up
@@ -1413,7 +1427,7 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean unloadWorld(World world, boolean save) {
-        if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet
+        //if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet // DirtyFolia - Removed check
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot unload a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         if (world == null) {
             return false;
@@ -2896,13 +2910,6 @@ public final class CraftServer implements Server {
             return CraftServer.this.console.paperConfigurations.createLegacyObject(CraftServer.this.console);
         }
 
-        // Kaiiju start
-        @Override
-        public YamlConfiguration getKaiijuConfig() {
-            return dev.kaiijumc.kaiiju.KaiijuConfig.config;
-        }
-        // Kaiiju end
-
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 66ee61f27dc435e27c4792b6cf4f320b91a54c57..937d0e3aed6dcc40514ed9e99bb9850c02c1a5ef 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -80,9 +80,7 @@ public class CraftBlock implements Block {
 
     public net.minecraft.world.level.block.state.BlockState getNMS() {
         // Folia start - region threading
-        if (world instanceof ServerLevel serverWorld) {
-            io.papermc.paper.util.TickThread.ensureTickThread(serverWorld, position, "Cannot read world asynchronously");
-        }
+        // DirtyFolia - Removed check
         // Folia end - region threading
         return this.world.getBlockState(position);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java b/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java
index 2c46527dfe832919b055579a0876a043c06d8b67..7660ec94e36b825aa0fcd9b0c78ced0ab58208c7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/AbstractProjectile.java
@@ -67,7 +67,7 @@ public abstract class AbstractProjectile extends CraftEntity implements Projecti
 
     @Override
     public net.minecraft.world.entity.projectile.Projectile getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.projectile.Projectile) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
index c43ce4c9f6d011a7403dd37ff62953aba29852aa..1a43280fca7875d89c11cb29bdb3b5bb7ceff34a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
@@ -26,7 +26,7 @@ public abstract class CraftAbstractHorse extends CraftAnimals implements Abstrac
 
     @Override
     public net.minecraft.world.entity.animal.horse.AbstractHorse getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.horse.AbstractHorse) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractSkeleton.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractSkeleton.java
index fa1bc80ae320c6d04acc20d6dec7df52a39d9920..bdf19b68e3cb13204c1dafc35babb55be9ceb03f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractSkeleton.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractSkeleton.java
@@ -25,7 +25,7 @@ public abstract class CraftAbstractSkeleton extends CraftMonster implements Abst
 
     @Override
     public net.minecraft.world.entity.monster.AbstractSkeleton getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.AbstractSkeleton) super.getHandle();
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java
index e3d57d4f65d1f3c03f407d497ff360dcd40a0fb1..787180898316a4bc690b168869b1d26dc7865e69 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java
@@ -26,7 +26,7 @@ public class CraftAbstractVillager extends CraftAgeable implements AbstractVilla
 
     @Override
     public net.minecraft.world.entity.npc.AbstractVillager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (Villager) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
index 69118f8ff00755ba1c31845a2704dd95fa2aee6e..323d51ca72a2e3995ce101713a36114d9549fa2e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
@@ -72,7 +72,7 @@ public class CraftAgeable extends CraftCreature implements Ageable {
 
     @Override
     public AgeableMob getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (AgeableMob) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
index 18044b45cc001739406f8151c54f06b5d70d17e0..c452671d7748302eea31169caa2c5b7de188892e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
@@ -26,7 +26,7 @@ public class CraftAllay extends CraftCreature implements org.bukkit.entity.Allay
 
     @Override
     public Allay getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (Allay) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java
index 93d9b4c40aa545d57650a411316210d193a6d3d7..84db9fbb652f53158682c6e78c1889c1c823209c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java
@@ -19,7 +19,7 @@ public class CraftAmbient extends CraftMob implements Ambient {
 
     @Override
     public AmbientCreature getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (AmbientCreature) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAnimals.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAnimals.java
index 5cf8ea3a7dd4e8ea96ca6061aa1aaefc7ac8fcce..2bd8a28dad2aeadbe025acc3b87725b1b28973b8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAnimals.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAnimals.java
@@ -24,7 +24,7 @@ public class CraftAnimals extends CraftAgeable implements Animals {
 
     @Override
     public Animal getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (Animal) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
index 2e5cc1c7cbe4fc7cbcc2b2aeb37d497e4909053d..0b3bee7bf2bd6b229361268fd907bc592a6bc586 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
@@ -33,7 +33,7 @@ public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud
 
     @Override
     public net.minecraft.world.entity.AreaEffectCloud getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.AreaEffectCloud) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java
index f678c151938ddd3e5277a05d6d8884c12b114336..99d207913441695132e5ce016c8a9c1ad10d2895 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java
@@ -35,7 +35,7 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
 
     @Override
     public net.minecraft.world.entity.decoration.ArmorStand getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.decoration.ArmorStand) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
index 6050a3209d893dc4b1f65f14f815840390c14eb0..8a0e0905c525c7d38b47a13b5569d59979fb80b4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
@@ -152,7 +152,7 @@ public class CraftArrow extends AbstractProjectile implements AbstractArrow {
 
     @Override
     public net.minecraft.world.entity.projectile.AbstractArrow getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.projectile.AbstractArrow) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
index dec03f00091ca781f0eaa4063649883f47040b07..ec8f21265145b8c91753e71de89d53f953b66fc5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
@@ -20,7 +20,7 @@ public class CraftAxolotl extends CraftAnimals implements Axolotl, io.papermc.pa
 
     @Override
     public net.minecraft.world.entity.animal.axolotl.Axolotl getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.axolotl.Axolotl) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
index 631250c15711d0912d2ae34efed02d78d20a0098..af8510862ff36527c9327e64d5eca0898ec9b6bb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
@@ -18,7 +18,7 @@ public class CraftBat extends CraftAmbient implements Bat {
 
     @Override
     public net.minecraft.world.entity.ambient.Bat getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.ambient.Bat) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
index 1e636646e3baa7a77c008d9109e0dccfbc497d6e..8e0d8bf82c487e0f96430964522502bfc29044b0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
@@ -23,7 +23,7 @@ public class CraftBee extends CraftAnimals implements Bee {
 
     @Override
     public net.minecraft.world.entity.animal.Bee getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Bee) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
index 7dfbf7f7a94eae0c62d6830d459c34784a7e518c..14fa8482b5c3cdeaa9421a0e28eeb4d9b08cc646 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
@@ -18,7 +18,7 @@ public class CraftBlaze extends CraftMonster implements Blaze {
 
     @Override
     public net.minecraft.world.entity.monster.Blaze getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Blaze) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlockDisplay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlockDisplay.java
index 29ac4ef7d2ed35e10df539b055db087f741fe4b6..c2b121941d8d2311730d31174072bab2b4a3cf3f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlockDisplay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlockDisplay.java
@@ -22,7 +22,7 @@ public class CraftBlockDisplay extends CraftDisplay implements BlockDisplay {
 
     @Override
     public net.minecraft.world.entity.Display.BlockDisplay getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.Display.BlockDisplay) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
index 6671a86496394a786034cab7defa8126b55e8d5e..77ef2e46ff385ae295c16598767412da7bfd081c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
@@ -101,7 +101,7 @@ public class CraftBoat extends CraftVehicle implements Boat {
 
     @Override
     public net.minecraft.world.entity.vehicle.Boat getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.vehicle.Boat) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
index 17dc189187e343db0e91f642a2edc782c6419ab9..9d7dda39ab6c3cb08df5ed1b1d2f4c045f8abf0f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
@@ -21,7 +21,7 @@ public class CraftCamel extends CraftAbstractHorse implements Camel {
 
     @Override
     public net.minecraft.world.entity.animal.camel.Camel getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.camel.Camel) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
index d2d54ba55b65108c7fdff6e6850982351f6127a6..9aefbde86981a38ddb046ca86e62f047925e8d08 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
@@ -23,7 +23,7 @@ public class CraftCat extends CraftTameableAnimal implements Cat {
 
     @Override
     public net.minecraft.world.entity.animal.Cat getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Cat) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java
index 86fee0d40a9dc6a18ec19dc3d85978f38b8d1cd0..ebfa75c1e402850518734501cf97f6e9ac22d28b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java
@@ -18,7 +18,7 @@ public class CraftCaveSpider extends CraftSpider implements CaveSpider {
 
     @Override
     public net.minecraft.world.entity.monster.CaveSpider getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.CaveSpider) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
index 0c9400446c2c69e4bd95d167c61ffe22442b4d35..9739235c6321f0bf9b537d6e9943956113cd3564 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
@@ -28,7 +28,7 @@ public class CraftChestBoat extends CraftBoat implements org.bukkit.entity.Chest
 
     @Override
     public ChestBoat getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (ChestBoat) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestedHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestedHorse.java
index 1a9986acde12881e32db67b9e7263072871331cb..fe79f4be9c0e07d37281800f378ee83bfcd01df1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestedHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestedHorse.java
@@ -19,7 +19,7 @@ public abstract class CraftChestedHorse extends CraftAbstractHorse implements Ch
 
     @Override
     public AbstractChestedHorse getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (AbstractChestedHorse) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
index 7066741a251d24c754058aa2553b9430de5b42d3..275f9e3edf4a4a505c6f55cb0afe0d9fd1023472 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
@@ -19,7 +19,7 @@ public class CraftChicken extends CraftAnimals implements Chicken {
 
     @Override
     public net.minecraft.world.entity.animal.Chicken getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Chicken) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCod.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCod.java
index f3b587295e90f58b0885bc3c7070b62f3cf7805d..9d599733a60afc7133b213d1da3f92831f381d23 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCod.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCod.java
@@ -19,7 +19,7 @@ public class CraftCod extends io.papermc.paper.entity.PaperSchoolableFish implem
 
     @Override
     public net.minecraft.world.entity.animal.Cod getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Cod) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
index 54aaee0d0d72c76a02e1ab5d51c47b26b6d08b93..66358c1c20c4b198caa59985848219f687918854 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
@@ -42,7 +42,7 @@ public class CraftComplexPart extends CraftEntity implements ComplexEntityPart {
 
     @Override
     public EnderDragonPart getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (EnderDragonPart) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
index a8514a688a6fe4f19000f8f127b0a1277e4f754d..ee441fe61154793551427ff1e648e16b470723e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
@@ -19,7 +19,7 @@ public class CraftCow extends CraftAnimals implements Cow {
 
     @Override
     public net.minecraft.world.entity.animal.Cow getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Cow) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
index 062a625e178ac9bbbb26f3d6548fb663b01d889b..1eeffb81d6f76db7b993428ed96e9fe12643a0fb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
@@ -18,7 +18,7 @@ public class CraftCreature extends CraftMob implements Creature {
 
     @Override
     public PathfinderMob getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (PathfinderMob) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
index 24c6c26f0930940f88bdd0353d660ff31a0d7c33..bd3a95e82847e2f3e97dbc08825be321da667d78 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
@@ -89,7 +89,7 @@ public class CraftCreeper extends CraftMonster implements Creeper {
 
     @Override
     public net.minecraft.world.entity.monster.Creeper getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Creeper) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDisplay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDisplay.java
index e5ffc16d4d5595a7065119c97293f5b419b5a274..7f40df73eaa196bc5274f484e3f56630937d1a83 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDisplay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDisplay.java
@@ -22,7 +22,7 @@ public class CraftDisplay extends CraftEntity implements Display {
 
     @Override
     public net.minecraft.world.entity.Display getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.Display) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
index 66f3a67ea0a81d4cfff8365ed055fff6967360b7..e57590117c69e5c8dd40f404ce2b435cbb377bb0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
@@ -19,7 +19,7 @@ public class CraftDolphin extends CraftWaterMob implements Dolphin {
 
     @Override
     public net.minecraft.world.entity.animal.Dolphin getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Dolphin) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
index 921a36e31f531ab43e9040463f66d8c081469ef4..288e7d65dfaaa810947fdfaac1776709365b0ca7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
@@ -19,7 +19,7 @@ public class CraftDrowned extends CraftZombie implements Drowned, com.destroysto
 
     @Override
     public net.minecraft.world.entity.monster.Drowned getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Drowned) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java
index c439ab4e1db346d01c5de4ad9f2ce48e8830a081..8840069d3cfb07cad0a550e20e9d53eb1cf14692 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java
@@ -19,7 +19,7 @@ public class CraftEgg extends CraftThrowableProjectile implements Egg {
 
     @Override
     public ThrownEgg getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (ThrownEgg) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
index d07b70f42c87a92fe662fc27a2eefa474db87bcc..cb451fc6e2303d8410941ea1f884e50def21a7e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
@@ -49,7 +49,7 @@ public class CraftEnderCrystal extends CraftEntity implements EnderCrystal {
 
     @Override
     public EndCrystal getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (EndCrystal) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
index 10b827cb126d937548cc29a1b052d5acfa244f67..dc0c692766652d08105dc8728191632645802c59 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
@@ -40,7 +40,7 @@ public class CraftEnderDragon extends CraftMob implements EnderDragon, CraftEnem
 
     @Override
     public net.minecraft.world.entity.boss.enderdragon.EnderDragon getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.boss.enderdragon.EnderDragon) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
index c1f73d89805eca8e13bdee80bcd89ef23cc4b332..aad07d5f5074a96526d6c5b43d349ce9acf443da 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
@@ -24,7 +24,7 @@ public class CraftEnderDragonPart extends CraftComplexPart implements EnderDrago
 
     @Override
     public net.minecraft.world.entity.boss.EnderDragonPart getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.boss.EnderDragonPart) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java
index 0cc66673866bd20ef74437866765134b0be503d3..e8534a6c59762e11864dca973693ec7a1e960415 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java
@@ -19,7 +19,7 @@ public class CraftEnderPearl extends CraftThrowableProjectile implements EnderPe
 
     @Override
     public ThrownEnderpearl getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (ThrownEnderpearl) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
index 631dce2beaa9c8d72d45349a436d72c5417e8de7..49f512a2a5892dfc384843e1056308b82852d521 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
@@ -25,7 +25,7 @@ public class CraftEnderSignal extends CraftEntity implements EnderSignal {
 
     @Override
     public EyeOfEnder getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (EyeOfEnder) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
index 6061d0ea83479611d2c33cf0e001cd43e75c03c4..15a21bad8037871c44635216a188ac58adce8040 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
@@ -72,7 +72,7 @@ public class CraftEnderman extends CraftMonster implements Enderman {
 
     @Override
     public EnderMan getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (EnderMan) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEndermite.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEndermite.java
index 6d3325436a77153438bc40aa86819562e65e6a9e..d15ae696d2b4d4699b3f2dfc12b137ab9fbb2269 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEndermite.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEndermite.java
@@ -19,7 +19,7 @@ public class CraftEndermite extends CraftMonster implements Endermite {
 
     @Override
     public net.minecraft.world.entity.monster.Endermite getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Endermite) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 76bcfda336e9cfa039d80ea3ccbebbc3d2b13f7f..698fa57404d6655ba684aeb263d8543715f57ce2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -7,6 +7,8 @@ import com.google.common.collect.Lists;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.ExecutionException;
+
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
@@ -578,10 +580,11 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     @Override
     public boolean teleport(Location location, TeleportCause cause, io.papermc.paper.entity.TeleportFlag... flags) {
         // Folia start - region threading
-        if (true) {
+        /*if (true) {
             throw new UnsupportedOperationException("Must use teleportAsync while in region threading");
-        }
+        }*/
         // Folia end - region threading
+        // DirtyFolia - Removed check
         // Paper end
         Preconditions.checkArgument(location != null, "location cannot be null");
         location.checkFinite();
@@ -607,7 +610,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         // If this entity is riding another entity, we must dismount before teleporting.
         if (dismount) this.entity.stopRiding(); // Paper - Teleport passenger API
 
-        // Let the server handle cross world teleports
+        /*// Let the server handle cross world teleports
         if (location.getWorld() != null && !location.getWorld().equals(this.getWorld())) {
             // Prevent teleportation to an other world during world generation
             Preconditions.checkState(!entity.generation, "Cannot teleport entity to an other world during world generation");
@@ -618,9 +621,13 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         // entity.setLocation() throws no event, and so cannot be cancelled
         entity.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch()); // Paper - use proper moveTo, as per vanilla teleporting
         // SPIGOT-619: Force sync head rotation also
-        this.entity.setYHeadRot(location.getYaw());
-
-        return true;
+        this.entity.setYHeadRot(location.getYaw());*/
+        // DirtyFolia - redirect to Entity#teleportAsync
+        try {
+            return teleportAsync(location, cause).get();
+        } catch (InterruptedException | ExecutionException e) {
+            throw new RuntimeException(e);
+        }
     }
 
     @Override
@@ -843,7 +850,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     // Folia end - region threading
 
     public Entity getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return this.entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
index 6d7f99943ae6453edeecaea06f4a906b7b20daaf..98fd46c4807ccc8d34d90ce4cff11a2d9136c8a5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
@@ -21,7 +21,7 @@ public class CraftEvoker extends CraftSpellcaster implements Evoker {
 
     @Override
     public net.minecraft.world.entity.monster.Evoker getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Evoker) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java
index 9fe7028cde18e4936cd2fc62a359feb6386596b3..696648e435949f94c7c7fc07843e77a5705f3dbe 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java
@@ -20,7 +20,7 @@ public class CraftEvokerFangs extends CraftEntity implements EvokerFangs {
 
     @Override
     public net.minecraft.world.entity.projectile.EvokerFangs getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.projectile.EvokerFangs) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
index 5b8333e342c639f33acf62e5f8eb72d0ba4a68c7..e6b2262a307c2995fb1e64a8c6ccfd5ae32e3c33 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
@@ -40,7 +40,7 @@ public class CraftExperienceOrb extends CraftEntity implements ExperienceOrb {
 
     @Override
     public net.minecraft.world.entity.ExperienceOrb getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.ExperienceOrb) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingBlock.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingBlock.java
index 61bed78df554dc6a9689ea19e159fde990082a1e..3b50cdc28a03b8d6358e0bd5f777e363c14baf98 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingBlock.java
@@ -24,7 +24,7 @@ public class CraftFallingBlock extends CraftEntity implements FallingBlock {
 
     @Override
     public FallingBlockEntity getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (FallingBlockEntity) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
index bd1ed5b1e58cb3ce40036a602acbb0b7a7e6322b..7da30887d41b7990f9e86eec914dcf3af35c16da 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
@@ -56,7 +56,7 @@ public class CraftFireball extends AbstractProjectile implements Fireball {
 
     @Override
     public AbstractHurtingProjectile getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (AbstractHurtingProjectile) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
index 851cb3216184180667b068f36984bff4a7765c49..dde288b1f1bd9d7a3adb2053560d3a43118d1f20 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
@@ -47,7 +47,7 @@ public class CraftFirework extends CraftProjectile implements Firework {
 
     @Override
     public FireworkRocketEntity getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (FireworkRocketEntity) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
index d702e34f65de28df677a9d3616f38b2cf9abfa23..5f70807cb8f8d83bea02e6cafa62e3e9961577a6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
@@ -19,7 +19,7 @@ public class CraftFish extends CraftWaterMob implements Fish, io.papermc.paper.e
 
     @Override
     public AbstractFish getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (AbstractFish) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
index d73d18e10d9a75a43f9352f5eebaa3be485e3572..31091bf755106f56b586c8d28138f1ef9be59e25 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
@@ -24,7 +24,7 @@ public class CraftFishHook extends CraftProjectile implements FishHook {
 
     @Override
     public FishingHook getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (FishingHook) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFlying.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFlying.java
index e1e51f050959aa23bd85bb794a7098a549c819c8..4f552f8aaaa6d78e2641b5246a30da9d6261d361 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFlying.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFlying.java
@@ -19,7 +19,7 @@ public class CraftFlying extends CraftMob implements Flying {
 
     @Override
     public FlyingMob getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (FlyingMob) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
index 36997290fa276275bbcf890a7b368f40a9ad8e02..85e006329af277aa40240218baf96171cae912f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
@@ -24,7 +24,7 @@ public class CraftFox extends CraftAnimals implements Fox {
 
     @Override
     public net.minecraft.world.entity.animal.Fox getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Fox) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
index 67e24a4c1daf6c986e34c4a41fb45285809b348f..32e7bd9c664adae72ea80d4a50941e47e739491e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
@@ -24,7 +24,7 @@ public class CraftFrog extends CraftAnimals implements org.bukkit.entity.Frog {
 
     @Override
     public Frog getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (Frog) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
index 308c39b5721dbf70ad256e5ccacc04831af398d5..dd92491285803adec478f422fa90ef035ed22ddc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
@@ -19,7 +19,7 @@ public class CraftGhast extends CraftFlying implements Ghast, CraftEnemy {
 
     @Override
     public net.minecraft.world.entity.monster.Ghast getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Ghast) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java
index f0a04ca56bd58844b40101190772786457239151..ccc1af2164e74c0b01926f65c51d156c524b6cd1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java
@@ -19,7 +19,7 @@ public class CraftGiant extends CraftMonster implements Giant {
 
     @Override
     public net.minecraft.world.entity.monster.Giant getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Giant) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowItemFrame.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowItemFrame.java
index 2450dc8a0f1fc526eb0b2ed917a5bbbebeadb7bc..b56eae202e8b357970793865898822dfd8f1d863 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowItemFrame.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowItemFrame.java
@@ -19,7 +19,7 @@ public class CraftGlowItemFrame extends CraftItemFrame implements GlowItemFrame
 
     @Override
     public net.minecraft.world.entity.decoration.GlowItemFrame getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.decoration.GlowItemFrame) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
index b5bac66ad28c0ed2bc41fa3ffe765c61817d6b8a..cb77ca5763e92c336398350ead166c3615eadda8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
@@ -20,7 +20,7 @@ public class CraftGlowSquid extends CraftSquid implements GlowSquid {
 
     @Override
     public net.minecraft.world.entity.GlowSquid getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.GlowSquid) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
index 8081d8ef5c2e773f7a716ef33cd842cc4a5458cc..dabc19332d542104ec819f430320577c15dbe36b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
@@ -19,7 +19,7 @@ public class CraftGoat extends CraftAnimals implements Goat {
 
     @Override
     public net.minecraft.world.entity.animal.goat.Goat getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.goat.Goat) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGolem.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGolem.java
index 1ab70f244ed31eea22cc2614788072dbf3b4bbb5..b8fdcb5f7bfa9cd4127f711f238f1f917cfb83be 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGolem.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGolem.java
@@ -18,7 +18,7 @@ public class CraftGolem extends CraftCreature implements Golem {
 
     @Override
     public AbstractGolem getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (AbstractGolem) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java
index 1280dd6ecc53d681bbb311b6099817b517bc50db..6d4de0a6350e07b2eca53db5d532b64ea4de1822 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java
@@ -23,7 +23,7 @@ public class CraftGuardian extends CraftMonster implements Guardian {
 
     @Override
     public net.minecraft.world.entity.monster.Guardian getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Guardian) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
index 1797199729d018d103ccae1773fc0206b8381b8d..4e6ede68dc04ce56516f36e883e9ab4ce0836562 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
@@ -67,7 +67,7 @@ public class CraftHanging extends CraftEntity implements Hanging {
 
     @Override
     public HangingEntity getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (HangingEntity) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHoglin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHoglin.java
index 1e312733b266e8350bc1a59113b195881c5a9e17..9235eb1ddd4e371128460685617a17b10a740cb8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHoglin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHoglin.java
@@ -61,7 +61,7 @@ public class CraftHoglin extends CraftAnimals implements Hoglin, CraftEnemy {
 
     @Override
     public net.minecraft.world.entity.monster.hoglin.Hoglin getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.hoglin.Hoglin) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
index a34608c74daced31ec45a96b643176a4d2ff72dc..50192f87b6779d683f66d17d4093176664efb96b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
@@ -23,7 +23,7 @@ public class CraftHorse extends CraftAbstractHorse implements Horse {
 
     @Override
     public net.minecraft.world.entity.animal.horse.Horse getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.horse.Horse) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index 07347858bff8a764a140cb3fbd484301803cfa00..e34ef4917c00ccd82e1b80213b5582a24e3cf4fa 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -300,7 +300,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
 
     @Override
     public Player getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (Player) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftIllager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftIllager.java
index 7becaa4d26df7309984b7aa271a0ae6f778acc0a..6f10b5373d8bcd3909ad67f260ff0f60c9086cf1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftIllager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftIllager.java
@@ -19,7 +19,7 @@ public class CraftIllager extends CraftRaider implements Illager {
 
     @Override
     public AbstractIllager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (AbstractIllager) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftIllusioner.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftIllusioner.java
index 3ab7929aa11584ec0f86ff8ad441f2b9660cf9c6..b38297cf92d623b6178cf8a4c7dbe341ba3785b8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftIllusioner.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftIllusioner.java
@@ -19,7 +19,7 @@ public class CraftIllusioner extends CraftSpellcaster implements Illusioner, com
 
     @Override
     public net.minecraft.world.entity.monster.Illusioner getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Illusioner) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftInteraction.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftInteraction.java
index 7b7074a9418bbcd87c18217ea78efdbc7d01528a..994e413ca820de2d10063855a69ed52ddabc2db0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftInteraction.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftInteraction.java
@@ -22,7 +22,7 @@ public class CraftInteraction extends CraftEntity implements Interaction {
 
     @Override
     public net.minecraft.world.entity.Interaction getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.Interaction) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
index 8c3818e8024ee25c29929368750dc346261db5d6..1bd905090c2fc209e7041a74de73b094763a2a59 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
@@ -18,7 +18,7 @@ public class CraftIronGolem extends CraftGolem implements IronGolem {
 
     @Override
     public net.minecraft.world.entity.animal.IronGolem getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.IronGolem) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemDisplay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemDisplay.java
index 06e2580653db00110b0f0a05cfda9d0e9baecdfa..7712093325cc76b5315335f6e9c682d683c46faf 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemDisplay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemDisplay.java
@@ -23,7 +23,7 @@ public class CraftItemDisplay extends CraftDisplay implements ItemDisplay {
 
     @Override
     public net.minecraft.world.entity.Display.ItemDisplay getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.Display.ItemDisplay) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
index 9f5825c037d26528740ba02aaf9eb1e36d564f67..0c0154bfd39cb4895054710acb65740dd92652de 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
@@ -165,7 +165,7 @@ public class CraftItemFrame extends CraftHanging implements ItemFrame {
 
     @Override
     public net.minecraft.world.entity.decoration.ItemFrame getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.decoration.ItemFrame) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java
index bbc439dab077bed605179129ae715f9989f2a181..934d19668a2cb47cbb3fc5450a67a949645bb74b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java
@@ -24,7 +24,7 @@ public class CraftLargeFireball extends CraftSizedFireball implements LargeFireb
 
     @Override
     public net.minecraft.world.entity.projectile.LargeFireball getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.projectile.LargeFireball) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
index ffccc8f021cdef6ed00241189aefd8217bc82d1c..ddf4bae8cd8336871f1780bb4442b329cb8b2a8c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
@@ -34,7 +34,7 @@ public class CraftLeash extends CraftHanging implements LeashHitch {
 
     @Override
     public LeashFenceKnotEntity getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (LeashFenceKnotEntity) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
index 80cac5d7362577e53ef5ca215ab3261898127b2f..146c2a0564b4fffad357aad330dd79ebd6bb2db5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
@@ -24,7 +24,7 @@ public class CraftLightningStrike extends CraftEntity implements LightningStrike
 
     @Override
     public LightningBolt getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (LightningBolt) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 957ae18874710ad0e10f4210fc819fe555437c01..26ad849814d8f669592508477cff0bc5adbee94b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -424,7 +424,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
     @Override
     public net.minecraft.world.entity.LivingEntity getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.LivingEntity) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
index bcb06f550033e346923026141dc96b032e9ff765..fbc50b92a3abeae92c43dbcf55855fd00e213a7e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
@@ -24,7 +24,7 @@ public class CraftLlama extends CraftChestedHorse implements Llama, com.destroys
 
     @Override
     public net.minecraft.world.entity.animal.horse.Llama getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.horse.Llama) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlamaSpit.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlamaSpit.java
index ce153695ce561664fa5e184bad0ca8895f0344f3..11f439e18625c1f407cc525f808dd038277f82a2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlamaSpit.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlamaSpit.java
@@ -20,7 +20,7 @@ public class CraftLlamaSpit extends AbstractProjectile implements LlamaSpit {
 
     @Override
     public net.minecraft.world.entity.projectile.LlamaSpit getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.projectile.LlamaSpit) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java
index e9fa1f544b7350d7537729768c1a0c3f846c18ac..10e79742e5b586beaf0829c0be3ef0acb09bbb95 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java
@@ -19,7 +19,7 @@ public class CraftMagmaCube extends CraftSlime implements MagmaCube {
 
     @Override
     public net.minecraft.world.entity.monster.MagmaCube getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.MagmaCube) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMarker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMarker.java
index 8f28ad0cc3feb4a1a034d916da1ccd892b2149de..54a394ab5c0144bbb8eb4e7935a5db4ae5d7aa8a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMarker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMarker.java
@@ -19,7 +19,7 @@ public class CraftMarker extends CraftEntity implements Marker {
 
     @Override
     public net.minecraft.world.entity.Marker getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.Marker) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
index 6cce3d64a4f506fcebbe34eae58163c57d43137c..56b2da2a054b8600da23edd8a7a6d2dd9564e204 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
@@ -95,7 +95,7 @@ public abstract class CraftMinecart extends CraftVehicle implements Minecart {
 
     @Override
     public AbstractMinecart getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (AbstractMinecart) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
index fd3eedcfa056c05761c53bccc62fb4dcd00fcb9b..9d31768416c11d0191c420884a322ebefcb0cd0f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
@@ -30,7 +30,7 @@ public class CraftMinecartCommand extends CraftMinecart implements CommandMineca
 
     @Override
     public MinecartCommandBlock getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (MinecartCommandBlock) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartContainer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartContainer.java
index b7d0892953f357e58665e87fbcf794a75f1c0980..aa55ece97d50f313b0c80effc802465b823f62ff 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartContainer.java
@@ -25,7 +25,7 @@ public abstract class CraftMinecartContainer extends CraftMinecart implements Lo
 
     @Override
     public AbstractMinecartContainer getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (AbstractMinecartContainer) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java
index e7c303a0f8b4e2ca26cf28b4661b7bdf56f2498f..36d98057f0f6db8d221d4024b2b553d1e4e0cd40 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java
@@ -21,7 +21,7 @@ public class CraftMinecartFurnace extends CraftMinecart implements PoweredMineca
 
     @Override
     public MinecartFurnace getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (MinecartFurnace) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
index 31665297fc24f6d2e86e206ef1ddf46ded51782f..e072aa17e1689ce8734ba35d14889f5d63ca9ff9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
@@ -50,7 +50,7 @@ public final class CraftMinecartHopper extends CraftMinecartContainer implements
 
     @Override
     public net.minecraft.world.entity.vehicle.MinecartHopper getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.vehicle.MinecartHopper) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
index dce230dc9dc44040e925e9ab5ab95529561ba464..c1d881b56ca2ebafb75bb471871631218d0eef3b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
@@ -52,7 +52,7 @@ public final class CraftMinecartTNT extends CraftMinecart implements ExplosiveMi
 
     @Override
     public MinecartTNT getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (MinecartTNT) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
index 148d0393b093a326f76fc34c035768f4758f3f1b..0bd5682d015c60e0483391cd074f0dec15eed5a3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
@@ -64,7 +64,7 @@ public abstract class CraftMob extends CraftLivingEntity implements Mob {
 
     @Override
     public net.minecraft.world.entity.Mob getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.Mob) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMonster.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMonster.java
index d3b655ab5adacd60f04f912187662c5717a72962..20783d2e8a7eb9de272182ce304bf2b980f9b7a3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMonster.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMonster.java
@@ -18,7 +18,7 @@ public class CraftMonster extends CraftCreature implements Monster, CraftEnemy {
 
     @Override
     public net.minecraft.world.entity.monster.Monster getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Monster) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
index f3016d316c1dcee3f5d7c7221668280c7bd9a76e..aaea9be8dff7875a04a8bbd20a5abe1df409708b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
@@ -20,7 +20,7 @@ public class CraftMushroomCow extends CraftCow implements MushroomCow, io.paperm
 
     @Override
     public net.minecraft.world.entity.animal.MushroomCow getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.MushroomCow) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java
index e6ba1a905a14ae7113decc72b121175eb85d2b36..1636ca443c8e53d70a14ed87fb16bc1c26562b17 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java
@@ -19,7 +19,7 @@ public class CraftOcelot extends CraftAnimals implements Ocelot {
 
     @Override
     public net.minecraft.world.entity.animal.Ocelot getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Ocelot) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
index 2fb654411b042159da97c79e69e8845e2b73c4bb..1a25a401154dfb594fb0d79fa93266bc135067fc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
@@ -61,7 +61,7 @@ public class CraftPainting extends CraftHanging implements Painting {
 
     @Override
     public net.minecraft.world.entity.decoration.Painting getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.decoration.Painting) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
index 71b307cd7029b8aeb511bfa6eb3f73736f2d0c91..c31a5d5626aae495962aa07e6451662af6e055a1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
@@ -21,7 +21,7 @@ public class CraftPanda extends CraftAnimals implements Panda {
 
     @Override
     public net.minecraft.world.entity.animal.Panda getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Panda) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
index caee1abf4c057afa08be8495bf742f871b2d1eae..6177fa523f110d14fde31fa5ef22c840652bde66 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
@@ -21,7 +21,7 @@ public class CraftParrot extends CraftTameableAnimal implements Parrot {
 
     @Override
     public net.minecraft.world.entity.animal.Parrot getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Parrot) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPhantom.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPhantom.java
index 8c02dabbfee88ee6c3315c8174da7236eecdd8cc..df786990c64974e2838423728c2580e2e44d31ee 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPhantom.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPhantom.java
@@ -19,7 +19,7 @@ public class CraftPhantom extends CraftFlying implements Phantom, CraftEnemy {
 
     @Override
     public net.minecraft.world.entity.monster.Phantom getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Phantom) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
index f94b45ba171fcbae718b50ab2ff60d38248e622c..5687547fc77afe26e2afb19f638dba29940b9968 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
@@ -65,7 +65,7 @@ public class CraftPig extends CraftAnimals implements Pig {
 
     @Override
     public net.minecraft.world.entity.animal.Pig getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Pig) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
index 8e4874f1bf3511e3947c48987caa098712271977..67d7863c1b76277598a3238b1c11807bc84053e4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
@@ -40,7 +40,7 @@ public class CraftPigZombie extends CraftZombie implements PigZombie {
 
     @Override
     public ZombifiedPiglin getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (ZombifiedPiglin) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
index 3da995c2aa9fe947d059e76bb6e6410827f6888d..3bb97c38e3718724f2bb52e25384db04bed54dfe 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
@@ -85,7 +85,7 @@ public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.dest
 
     @Override
     public net.minecraft.world.entity.monster.piglin.Piglin getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.piglin.Piglin) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinAbstract.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinAbstract.java
index ce763867f9c6c2d4773d76387afc0ecb479b6259..8b1966ca5111a81ad8db096903f4ef5f577d24a5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinAbstract.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinAbstract.java
@@ -104,7 +104,7 @@ public class CraftPiglinAbstract extends CraftMonster implements PiglinAbstract
 
     @Override
     public AbstractPiglin getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (AbstractPiglin) super.getHandle();
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinBrute.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinBrute.java
index 18416b48a05a8d564b7715ad00f947e4f4c70d9d..6ee0d5689c9fdae6433132d7b3efe43828cee636 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinBrute.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinBrute.java
@@ -19,7 +19,7 @@ public class CraftPiglinBrute extends CraftPiglinAbstract implements PiglinBrute
 
     @Override
     public net.minecraft.world.entity.monster.piglin.PiglinBrute getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.piglin.PiglinBrute) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPillager.java
index e1b7922ed298b6b3068c3f5fbe3b4030cff13484..0a90315d19337faaac0f676ac6891d91d8c9298a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPillager.java
@@ -21,7 +21,7 @@ public class CraftPillager extends CraftIllager implements Pillager, com.destroy
 
     @Override
     public net.minecraft.world.entity.monster.Pillager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Pillager) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPolarBear.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPolarBear.java
index 23364bbd534a147954d72986a96aee836e0aa210..768f7c9601c7b6cdf344f491d174ad30ee9eb514 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPolarBear.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPolarBear.java
@@ -19,7 +19,7 @@ public class CraftPolarBear extends CraftAnimals implements PolarBear {
 
     @Override
     public net.minecraft.world.entity.animal.PolarBear getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.PolarBear) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
index 1521ad3c160062f22e6e17d2dacde5d8db5ccc00..56c2e5a121386244081e69e6cab8ba5fe722ce77 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
@@ -21,7 +21,7 @@ public abstract class CraftProjectile extends AbstractProjectile implements Proj
 
     @Override
     public net.minecraft.world.entity.projectile.Projectile getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.projectile.Projectile) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
index ed0e5d32a187dd41952b923e4a1734afa7d092b1..a0b628c2ae02f75352905182b585252618051ad0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
@@ -20,7 +20,7 @@ public class CraftPufferFish extends CraftFish implements PufferFish {
 
     @Override
     public Pufferfish getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (Pufferfish) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
index 5d852e0a34004b877555157dd45020e5a5d30fd1..dd18c769dde9b33c573c2e5fead44964d4655ead 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
@@ -23,7 +23,7 @@ public class CraftRabbit extends CraftAnimals implements Rabbit {
 
     @Override
     public net.minecraft.world.entity.animal.Rabbit getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Rabbit) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java
index 6fb31c15d65885614b3878b5bcce08567d5b2089..2511190c6c37140737138b966eb7ea0224c41c9f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java
@@ -23,7 +23,7 @@ public abstract class CraftRaider extends CraftMonster implements Raider {
 
     @Override
     public net.minecraft.world.entity.raid.Raider getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.raid.Raider) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
index 0e08b2f7a21a09f61ff4800439346260ef96e2d9..52bd3240fcadbfa0d4fa7523da71558c0d135d74 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
@@ -19,7 +19,7 @@ public class CraftRavager extends CraftRaider implements Ravager {
 
     @Override
     public net.minecraft.world.entity.monster.Ravager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Ravager) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java
index 3951fa2f21932dc1b4948fab08998afaf928b27d..b74aa564da3a3878c4bb0be315043a5c6c7ab0ab 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java
@@ -19,7 +19,7 @@ public class CraftSalmon extends io.papermc.paper.entity.PaperSchoolableFish imp
 
     @Override
     public net.minecraft.world.entity.animal.Salmon getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Salmon) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java
index e3c6a74d267ea0a10be375fc83428415ad575fc2..93422d1e6030ffadf4f011893106ff9ae2079c2c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java
@@ -39,7 +39,7 @@ public class CraftSheep extends CraftAnimals implements Sheep, io.papermc.paper.
 
     @Override
     public net.minecraft.world.entity.animal.Sheep getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Sheep) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
index ccf7fd9be8baeda0b47b7abf090f255842bc639c..2a1a2ba2e6010729397b5b2cd78a776e10beab18 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
@@ -33,7 +33,7 @@ public class CraftShulker extends CraftGolem implements Shulker, CraftEnemy {
 
     @Override
     public net.minecraft.world.entity.monster.Shulker getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Shulker) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
index 2435b081eb0587d155d8c4ffb8d67b7529965d85..b169125caf170469838b0cdb4c9fa4b49e80c9c1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
@@ -80,7 +80,7 @@ public class CraftShulkerBullet extends AbstractProjectile implements ShulkerBul
 
     @Override
     public net.minecraft.world.entity.projectile.ShulkerBullet getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.projectile.ShulkerBullet) entity;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java
index a5a9d0daa0fd5641cbe10b5b269b26a0d589a5d5..f89f9bc8b418b591dceba6b7fe8baf1ce1b5b2ae 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java
@@ -18,7 +18,7 @@ public class CraftSilverfish extends CraftMonster implements Silverfish {
 
     @Override
     public net.minecraft.world.entity.monster.Silverfish getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Silverfish) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSizedFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSizedFireball.java
index c9bfe84cbd2c5835e070251ace2ef06ccb7004cf..64877959c9c2dc963089527d12169a3d162e4b30 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSizedFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSizedFireball.java
@@ -36,7 +36,7 @@ public class CraftSizedFireball extends CraftFireball implements SizedFireball {
 
     @Override
     public Fireball getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (Fireball) entity;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
index 4aed90c5ed149cc84d91c417b57edec71042d7cc..0251c23c982eea6214cc746113630d7bc9386d86 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
@@ -41,7 +41,7 @@ public class CraftSkeleton extends CraftAbstractSkeleton implements Skeleton {
 
     @Override
     public net.minecraft.world.entity.monster.Skeleton getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Skeleton) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
index 2744d69cc268c809457d730e0061ebfb6c6aee11..205d28e1770300bd77c63bdf2449abc415c992d2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
@@ -35,7 +35,7 @@ public class CraftSkeletonHorse extends CraftAbstractHorse implements SkeletonHo
 
     @Override
     public net.minecraft.world.entity.animal.horse.SkeletonHorse getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.horse.SkeletonHorse) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java
index 307a2b8015c9598083bedccb0c516ea64c4fc514..4f7c7d2d9be2a1509854916189d1f6c0d2fccfb9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java
@@ -29,7 +29,7 @@ public class CraftSlime extends CraftMob implements Slime, CraftEnemy {
 
     @Override
     public net.minecraft.world.entity.monster.Slime getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Slime) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java
index 17b83eb8563586f1ddf252f438d52d554e946def..b559c3cebed7eb840345b803610718370542598c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java
@@ -18,7 +18,7 @@ public class CraftSmallFireball extends CraftSizedFireball implements SmallFireb
 
     @Override
     public net.minecraft.world.entity.projectile.SmallFireball getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.projectile.SmallFireball) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
index 3549d9b0c8ed9d746c38bebedaa7c729717bed92..0609990ad2849b7f5f64c2273133a1b7fe835e04 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
@@ -26,7 +26,7 @@ public class CraftSniffer extends CraftAnimals implements Sniffer {
 
     @Override
     public net.minecraft.world.entity.animal.sniffer.Sniffer getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.sniffer.Sniffer) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java
index 117cdf4b1315f2de32aa13844f0f4c46f21cc96d..2b5aea01ae35b3f46e8b96f9043556fb103ce3b7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java
@@ -18,7 +18,7 @@ public class CraftSnowball extends CraftThrowableProjectile implements Snowball
 
     @Override
     public net.minecraft.world.entity.projectile.Snowball getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.projectile.Snowball) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
index 00907c925fdb0d709ff421cdc8a1742282ad372f..fc036094e384e4dc136b222808f0661c1cffecf3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
@@ -29,7 +29,7 @@ public class CraftSnowman extends CraftGolem implements Snowman, com.destroystok
 
     @Override
     public SnowGolem getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (SnowGolem) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpectralArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpectralArrow.java
index f4bd0872dc725dc9040a89cbc627d86b786290df..75212e07204b5cdbcf7bbeb72b339e07a66ad3e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpectralArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpectralArrow.java
@@ -19,7 +19,7 @@ public class CraftSpectralArrow extends CraftArrow implements SpectralArrow {
 
     @Override
     public net.minecraft.world.entity.projectile.SpectralArrow getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.projectile.SpectralArrow) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpellcaster.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpellcaster.java
index 3dbb5f7f88979d616e185980d96cc2c377977000..4fbca2b65dbe123cf08020774603b5560b816a3f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpellcaster.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpellcaster.java
@@ -21,7 +21,7 @@ public class CraftSpellcaster extends CraftIllager implements Spellcaster {
 
     @Override
     public SpellcasterIllager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (SpellcasterIllager) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java
index 496fb0ac11cdf32701b0d5fb4761a0ada60a78ac..c71138df9ae2139aa3dddaebd61ece4a6d5ce494 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java
@@ -19,7 +19,7 @@ public class CraftSpider extends CraftMonster implements Spider {
 
     @Override
     public net.minecraft.world.entity.monster.Spider getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Spider) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
index 10875cdf36b426de512c52ae60ac7e2c8312114b..df582f64868d8d03cb0785299d84ff07102c246f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
@@ -19,7 +19,7 @@ public class CraftSquid extends CraftWaterMob implements Squid {
 
     @Override
     public net.minecraft.world.entity.animal.Squid getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Squid) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
index 89cd22b73c38773961d6955d429564e816b8183a..065a4ed62f9781c07f0635c2f256b33cbc9d6a6d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
@@ -75,7 +75,7 @@ public class CraftStrider extends CraftAnimals implements Strider {
 
     @Override
     public net.minecraft.world.entity.monster.Strider getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Strider) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
index 3be27209a4429c6ab618798418451bd527a2115b..e98c5659cc8aa0b25efb85f04a8a42e93056a958 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
@@ -52,7 +52,7 @@ public class CraftTNTPrimed extends CraftEntity implements TNTPrimed {
 
     @Override
     public PrimedTnt getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (PrimedTnt) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
index 1fab7a34e4fe624d901c0264cda980fd91dbd8e0..8f8f1366595310a0f841d9a8d6529e552d69e7f2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
@@ -19,7 +19,7 @@ public class CraftTadpole extends CraftFish implements org.bukkit.entity.Tadpole
 
     @Override
     public Tadpole getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (Tadpole) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
index dc09e141ba2b12f1955bec521f2170d2fe4ba113..d5681887bb9490df491e4c437e6f0b19dc3ab60f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
@@ -21,7 +21,7 @@ public class CraftTameableAnimal extends CraftAnimals implements Tameable, Creat
 
     @Override
     public TamableAnimal getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (TamableAnimal) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java
index 616848bf66273048dfde1f8802582fb871f8a5bb..aa5f61e0e083b09062d131223c084e2a3e78d04a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTextDisplay.java
@@ -23,7 +23,7 @@ public class CraftTextDisplay extends CraftDisplay implements TextDisplay {
 
     @Override
     public net.minecraft.world.entity.Display.TextDisplay getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.Display.TextDisplay) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrowableProjectile.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrowableProjectile.java
index 8e66e9ac17a8a06130d6b039f27868d42554f337..31db1bbdca32f2f71062016f49ef8f0ea9eacff4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrowableProjectile.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrowableProjectile.java
@@ -35,7 +35,7 @@ public abstract class CraftThrowableProjectile extends CraftProjectile implement
 
     @Override
     public ThrowableItemProjectile getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (ThrowableItemProjectile) entity;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java
index 34de9dcd6fa0e978c65bf48ae78923784bf575fd..2546db98bf212c94f299f1bf369b2139420453a8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java
@@ -19,7 +19,7 @@ public class CraftThrownExpBottle extends CraftThrowableProjectile implements Th
 
     @Override
     public ThrownExperienceBottle getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (ThrownExperienceBottle) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
index 6c15ba92215634a06a1d95fbd7d64bff2bb935dc..c625cacf685298e08982a5b48671110aa9a1221f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
@@ -71,7 +71,7 @@ public class CraftThrownPotion extends CraftThrowableProjectile implements Throw
 
     @Override
     public net.minecraft.world.entity.projectile.ThrownPotion getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.projectile.ThrownPotion) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
index 8c4c07db82ed8aa1a1f746cfc43eef5ff81d085b..a102eb6a8bbe60322c3db7e4dc83c50680e0ba76 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
@@ -29,7 +29,7 @@ public class CraftTippedArrow extends CraftArrow implements Arrow {
 
     @Override
     public net.minecraft.world.entity.projectile.Arrow getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.projectile.Arrow) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTraderLlama.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTraderLlama.java
index 124c78fcb7b59d6cb3d4de53609fb64f652c17e4..f5383ebf57c838d2bf438144e274d3e6838da98b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTraderLlama.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTraderLlama.java
@@ -19,7 +19,7 @@ public class CraftTraderLlama extends CraftLlama implements TraderLlama {
 
     @Override
     public net.minecraft.world.entity.animal.horse.TraderLlama getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.horse.TraderLlama) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTrident.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTrident.java
index 4c69a367dfdf7c3b8e82dd44f005ed613e1fe0bf..0fddb919d8cca232802483cd6ac46e30ff2ac3d8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTrident.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTrident.java
@@ -22,7 +22,7 @@ public class CraftTrident extends CraftArrow implements Trident {
 
     @Override
     public ThrownTrident getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (ThrownTrident) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java
index f8aa5bc3d846d2fd785c612dd3906b84686e0792..7782efac666fd89e536a34d7437e2719ee138101 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java
@@ -23,7 +23,7 @@ public class CraftTropicalFish extends io.papermc.paper.entity.PaperSchoolableFi
 
     @Override
     public net.minecraft.world.entity.animal.TropicalFish getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.TropicalFish) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTurtle.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTurtle.java
index 319efb68aebd6d1182dede7b2b6f368b3d7b62c2..1b9d0143b504d976a3bc6800d8ad497beb1cf928 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTurtle.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTurtle.java
@@ -19,7 +19,7 @@ public class CraftTurtle extends CraftAnimals implements Turtle {
 
     @Override
     public net.minecraft.world.entity.animal.Turtle getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Turtle) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVex.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVex.java
index 90c295ff95bbee4f51fda1be2f58312d281925e5..bcb60c85b75abc266d472d19d66435831cd7c919 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVex.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVex.java
@@ -23,7 +23,7 @@ public class CraftVex extends CraftMonster implements Vex {
 
     @Override
     public net.minecraft.world.entity.monster.Vex getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Vex) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index 4b4167edcf9e30d50a103c5b85685e7175842f4b..d5708191d04f53334188df85cac5acd853d35c3a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -39,7 +39,7 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
 
     @Override
     public net.minecraft.world.entity.npc.Villager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.npc.Villager) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
index 6231a4948fd934d2e73f15b364035c64d7e03cc8..d67387c1df3fc8f2653c6ec860d9c5a5d50e0d14 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
@@ -28,7 +28,7 @@ public class CraftVillagerZombie extends CraftZombie implements ZombieVillager {
 
     @Override
     public net.minecraft.world.entity.monster.ZombieVillager getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.ZombieVillager) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVindicator.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVindicator.java
index fc7a87ed98801914d5cf3e6784f0025db30cf663..ef2ea9bfde87f68aaddc149bb6f47d6561572869 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVindicator.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVindicator.java
@@ -19,7 +19,7 @@ public class CraftVindicator extends CraftIllager implements Vindicator {
 
     @Override
     public net.minecraft.world.entity.monster.Vindicator getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Vindicator) super.getHandle();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWanderingTrader.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWanderingTrader.java
index 824e2c7aa9263195cb173da2b5612b3b8bc3a046..7271b2e0149750d8c3b67af427c8f0a46caca700 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWanderingTrader.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWanderingTrader.java
@@ -19,7 +19,7 @@ public class CraftWanderingTrader extends CraftAbstractVillager implements Wande
 
     @Override
     public net.minecraft.world.entity.npc.WanderingTrader getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.npc.WanderingTrader) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
index a4ede0f5973d18ed6b8ae3ee425c4445f39e86c4..6b326688680c5ea5faac62064af04d7b741efdeb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
@@ -25,7 +25,7 @@ public class CraftWarden extends CraftMonster implements org.bukkit.entity.Warde
 
     @Override
     public Warden getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (Warden) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java
index c03b8291bac77696daf24caaff3512d6a0ba10db..5106644ccd397f8cb3d8e5cc6d1859b5f67ee5c2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java
@@ -19,7 +19,7 @@ public class CraftWaterMob extends CraftCreature implements WaterMob {
 
     @Override
     public WaterAnimal getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (WaterAnimal) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java
index c2bceaeabf13d37506eea540cb153d10ba18d817..0eef06b2dc05dfec3de1d802d25536565d61d5f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java
@@ -25,7 +25,7 @@ public class CraftWitch extends CraftRaider implements Witch, com.destroystokyo.
 
     @Override
     public net.minecraft.world.entity.monster.Witch getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Witch) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java
index a6dc41a1eac7aa08a4e13489a7dabb61cd4eadd7..ee8eb20f11116f6af5380f78555dede99c32babe 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java
@@ -31,7 +31,7 @@ public class CraftWither extends CraftMonster implements Wither, com.destroystok
 
     @Override
     public WitherBoss getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (WitherBoss) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java
index d7b5dc3632e22003f80843882652a35d7306b9d9..09bd1152af679b851e40e6d917660b7687048225 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java
@@ -28,7 +28,7 @@ public class CraftWitherSkull extends CraftFireball implements WitherSkull {
 
     @Override
     public net.minecraft.world.entity.projectile.WitherSkull getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.projectile.WitherSkull) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
index 05372166c2cc7b48184c18a4fdd788a242ec4682..8c36f9dd949ab3b193ec07899b93e40fcb695999 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
@@ -33,7 +33,7 @@ public class CraftWolf extends CraftTameableAnimal implements Wolf {
 
     @Override
     public net.minecraft.world.entity.animal.Wolf getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.animal.Wolf) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZoglin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZoglin.java
index 8195313de7a047e694c718609505a60b592f3565..3c7b14dee7006bfce5484484c6854bee9c8a4244 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZoglin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZoglin.java
@@ -29,7 +29,7 @@ public class CraftZoglin extends CraftMonster implements Zoglin {
 
     @Override
     public net.minecraft.world.entity.monster.Zoglin getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Zoglin) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
index 631132549f454ffd6dc97e1bce2e994e7ce310d6..44890a0f5039f88454e27cced72bcc6946bea526 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
@@ -22,7 +22,7 @@ public class CraftZombie extends CraftMonster implements Zombie {
 
     @Override
     public net.minecraft.world.entity.monster.Zombie getHandle() {
-        io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading
+        //io.papermc.paper.util.TickThread.ensureTickThread(this.entity, "Accessing entity state off owning region's thread"); // Folia - region threading // DirtyFolia - Removed check
         return (net.minecraft.world.entity.monster.Zombie) entity;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index e24d653fafcd88e01786b77539c506bcf3751c2c..e98650221c70f63b52ea31c2d24ff8779f0f2e73 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -8,16 +8,18 @@ import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
 import java.util.PriorityQueue;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.Executor;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
+import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
 import java.util.function.IntUnaryOperator;
 import java.util.logging.Level;
+import com.destroystokyo.paper.ServerSchedulerReportingWrapper;
+import com.destroystokyo.paper.event.server.ServerExceptionEvent;
+import com.destroystokyo.paper.exception.ServerSchedulerException;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
+import org.apache.commons.lang.Validate;
+import org.bukkit.Bukkit;
 import org.bukkit.plugin.IllegalPluginAccessException;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitRunnable;
@@ -530,15 +532,35 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     protected CraftTask handle(final CraftTask task, final long delay) { // Paper
-        if (true) throw new UnsupportedOperationException(); // Folia - region threading
+        //if (true) throw new UnsupportedOperationException(); // Folia - region threading // DirtyFolia - Removed check
         // Paper start
         if (!this.isAsyncScheduler && !task.isSync()) {
-            this.asyncScheduler.handle(task, delay);
+            long mdelay = (long) (delay / 20.0 * 1000.0);
+            ScheduledTask scheduledTask;
+            if (mdelay <= 0) {
+                scheduledTask = Bukkit.getAsyncScheduler().runNow(task.getOwner(), stask -> {
+                    task.run();
+                });
+            } else {
+                scheduledTask = Bukkit.getAsyncScheduler().runDelayed(task.getOwner(), stask -> {
+                    task.run();
+                }, mdelay, TimeUnit.MILLISECONDS);
+            }
+            task.setScheduledTask(scheduledTask);
             return task;
         }
         // Paper end
-        task.setNextRun(this.currentTick + delay);
-        this.addTask(task);
+        ScheduledTask scheduledTask;
+        if (delay <= 0) {
+            scheduledTask = Bukkit.getGlobalRegionScheduler().run(task.getOwner(), stask -> {
+                task.run();
+            });
+        } else {
+            scheduledTask = Bukkit.getGlobalRegionScheduler().runDelayed(task.getOwner(), stask -> {
+                task.run();
+            }, delay);
+        }
+        task.setScheduledTask(scheduledTask);
         return task;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 3f45bab0e9f7b3697e6d9d1092a1e6e579f7066f..393061574058772fbf8689770f5bb18d8ae04bd1 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.scheduler;
 import java.util.function.Consumer;
 
 import co.aikar.timings.NullTimingHandler;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import org.bukkit.Bukkit;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitTask;
@@ -35,6 +36,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
     private final Plugin plugin;
     private final int id;
     private final long createdAt = System.nanoTime();
+    private ScheduledTask scheduledTask;
 
     CraftTask() {
         this(null, null, CraftTask.NO_REPEATING, CraftTask.NO_REPEATING);
@@ -139,12 +141,16 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
 
     @Override
     public boolean isCancelled() {
-        return (this.period == CraftTask.CANCEL);
+        return scheduledTask.isCancelled();
     }
 
     @Override
     public void cancel() {
-        Bukkit.getScheduler().cancelTask(id);
+        scheduledTask.cancel();
+    }
+
+    protected void setScheduledTask(ScheduledTask scheduledTask) {
+        this.scheduledTask = scheduledTask;
     }
 
     /**
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
index 351667dea3882a71dbd14cc57692ffc3e7c4d43f..a5fe968d908d27e5eba8b01855ce944014d386cc 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
@@ -43,7 +43,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
     @Override
     public CraftObjective registerNewObjective(String name, Criteria criteria, net.kyori.adventure.text.Component displayName, RenderType renderType) throws IllegalArgumentException {
-        if (true) throw new UnsupportedOperationException(); // Folia - not supported yet
+        //if (true) throw new UnsupportedOperationException(); // Folia - not supported yet // DirtyFolia - Removed check
         if (displayName == null) {
             displayName = net.kyori.adventure.text.Component.empty();
         }
@@ -199,7 +199,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     @Override
     public Team registerNewTeam(String name) throws IllegalArgumentException {
-        if (true) throw new UnsupportedOperationException(); // Folia - not supported yet
+        //if (true) throw new UnsupportedOperationException(); // Folia - not supported yet // DirtyFolia - Removed check
         Preconditions.checkArgument(name != null, "Team name cannot be null");
         Preconditions.checkArgument(name.length() <= Short.MAX_VALUE, "Team name '%s' is longer than the limit of 32767 characters (%s)", name, name.length());
         Preconditions.checkArgument(this.board.getPlayerTeam(name) == null, "Team name '%s' is already in use", name);
@@ -227,7 +227,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     @Override
     public void clearSlot(DisplaySlot slot) throws IllegalArgumentException {
-        if (true) throw new UnsupportedOperationException(); // Folia - not supported yet
+        //if (true) throw new UnsupportedOperationException(); // Folia - not supported yet // DirtyFolia - Removed check
         Preconditions.checkArgument(slot != null, "Slot cannot be null");
         this.board.setDisplayObjective(CraftScoreboardTranslations.fromBukkitSlot(slot), null);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
index 92a2115035e2f13b2c3bd90bd5eed23e7a37bf62..47d19d2cdc733240502246c07cc1d715584b5140 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
@@ -42,7 +42,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
 
     @Override
     public CraftScoreboard getNewScoreboard() {
-        if (true) throw new UnsupportedOperationException(); // Folia - not supported yet
+        //if (true) throw new UnsupportedOperationException(); // Folia - not supported yet // DirtyFolia - Removed check
         org.spigotmc.AsyncCatcher.catchOp("scoreboard creation"); // Spigot
         CraftScoreboard scoreboard = new CraftScoreboard(new ServerScoreboard(this.server));
         // Paper start
@@ -69,7 +69,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
 
     // CraftBukkit method
     public void setPlayerBoard(CraftPlayer player, org.bukkit.scoreboard.Scoreboard bukkitScoreboard) throws IllegalArgumentException {
-        if (true) throw new UnsupportedOperationException(); // Folia - not supported yet
+        //if (true) throw new UnsupportedOperationException(); // Folia - not supported yet // DirtyFolia - Removed check
         Preconditions.checkArgument(bukkitScoreboard instanceof CraftScoreboard, "Cannot set player scoreboard to an unregistered Scoreboard");
 
         CraftScoreboard scoreboard = (CraftScoreboard) bukkitScoreboard;
diff --git a/src/main/java/org/spigotmc/Metrics.java b/src/main/java/org/spigotmc/Metrics.java
index 8f15af52d2ed734732134bf011ccdd4b7856a284..58cd6351a7caca210434a9d1023904cc428b6182 100644
--- a/src/main/java/org/spigotmc/Metrics.java
+++ b/src/main/java/org/spigotmc/Metrics.java
@@ -359,7 +359,7 @@ public class Metrics {
         Metrics.encodeDataPair(data, "revision", String.valueOf(REVISION));
 
         // New data as of R6
-        String osname = System.getProperty("os.name");
+        String osname = System.getProperty("os.name") + " (With DirtyFolia)";
         String osarch = System.getProperty("os.arch");
         String osversion = System.getProperty("os.version");
         String java_version = System.getProperty("java.version");
diff --git a/src/main/resources/logo.png b/src/main/resources/logo.png
index c06126b92e36566c93b901637926703bbfcc42ff..ef89e09a08f961a09e32237c28a31b9388ac0927 100644
GIT binary patch
literal 23087
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
Rp&-vxhI*#Dwc0MR{{!^_4TAsx

literal 36428
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
w|1kyt000000000000000000000001h-~8pj()Vetm;e9(07*qoM6N<$f(agZz5oCK

